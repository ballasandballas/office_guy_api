# coding: utf-8

"""
    OfficeGuy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-06-20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body160(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_from': 'datetime',
        'date_to': 'datetime',
        'mark_as_exported': 'bool',
        'export_new_documents_only': 'bool',
        'credentials': 'Object'
    }
    if hasattr(AccountingHashExportExportSendRequest, "swagger_types"):
        swagger_types.update(AccountingHashExportExportSendRequest.swagger_types)

    attribute_map = {
        'date_from': 'Date_From',
        'date_to': 'Date_To',
        'mark_as_exported': 'MarkAsExported',
        'export_new_documents_only': 'ExportNewDocumentsOnly',
        'credentials': 'Credentials'
    }
    if hasattr(AccountingHashExportExportSendRequest, "attribute_map"):
        attribute_map.update(AccountingHashExportExportSendRequest.attribute_map)

    def __init__(self, date_from=None, date_to=None, mark_as_exported=None, export_new_documents_only=None, credentials=None, *args, **kwargs):  # noqa: E501
        """Body160 - a model defined in Swagger"""  # noqa: E501
        self._date_from = None
        self._date_to = None
        self._mark_as_exported = None
        self._export_new_documents_only = None
        self._credentials = None
        self.discriminator = None
        self.date_from = date_from
        self.date_to = date_to
        if mark_as_exported is not None:
            self.mark_as_exported = mark_as_exported
        if export_new_documents_only is not None:
            self.export_new_documents_only = export_new_documents_only
        self.credentials = credentials
        AccountingHashExportExportSendRequest.__init__(self, *args, **kwargs)

    @property
    def date_from(self):
        """Gets the date_from of this Body160.  # noqa: E501

        Date range - from  # noqa: E501

        :return: The date_from of this Body160.  # noqa: E501
        :rtype: datetime
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this Body160.

        Date range - from  # noqa: E501

        :param date_from: The date_from of this Body160.  # noqa: E501
        :type: datetime
        """
        if date_from is None:
            raise ValueError("Invalid value for `date_from`, must not be `None`")  # noqa: E501

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this Body160.  # noqa: E501

        Date range - to  # noqa: E501

        :return: The date_to of this Body160.  # noqa: E501
        :rtype: datetime
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this Body160.

        Date range - to  # noqa: E501

        :param date_to: The date_to of this Body160.  # noqa: E501
        :type: datetime
        """
        if date_to is None:
            raise ValueError("Invalid value for `date_to`, must not be `None`")  # noqa: E501

        self._date_to = date_to

    @property
    def mark_as_exported(self):
        """Gets the mark_as_exported of this Body160.  # noqa: E501

        Mark records as exported<div><i>Defaults to False</i></div>  # noqa: E501

        :return: The mark_as_exported of this Body160.  # noqa: E501
        :rtype: bool
        """
        return self._mark_as_exported

    @mark_as_exported.setter
    def mark_as_exported(self, mark_as_exported):
        """Sets the mark_as_exported of this Body160.

        Mark records as exported<div><i>Defaults to False</i></div>  # noqa: E501

        :param mark_as_exported: The mark_as_exported of this Body160.  # noqa: E501
        :type: bool
        """

        self._mark_as_exported = mark_as_exported

    @property
    def export_new_documents_only(self):
        """Gets the export_new_documents_only of this Body160.  # noqa: E501

        Export only new documents<div><i>Defaults to False</i></div>  # noqa: E501

        :return: The export_new_documents_only of this Body160.  # noqa: E501
        :rtype: bool
        """
        return self._export_new_documents_only

    @export_new_documents_only.setter
    def export_new_documents_only(self, export_new_documents_only):
        """Sets the export_new_documents_only of this Body160.

        Export only new documents<div><i>Defaults to False</i></div>  # noqa: E501

        :param export_new_documents_only: The export_new_documents_only of this Body160.  # noqa: E501
        :type: bool
        """

        self._export_new_documents_only = export_new_documents_only

    @property
    def credentials(self):
        """Gets the credentials of this Body160.  # noqa: E501

        Company API credentials  # noqa: E501

        :return: The credentials of this Body160.  # noqa: E501
        :rtype: Object
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this Body160.

        Company API credentials  # noqa: E501

        :param credentials: The credentials of this Body160.  # noqa: E501
        :type: Object
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501

        self._credentials = credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body160, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body160):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
