# coding: utf-8

"""
    OfficeGuy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-06-20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AccountingDocumentsGetDetailsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document': 'AllOfAccountingDocumentsGetDetailsResponseDocument',
        'items': 'list[AccountingTypedDocumentItem]',
        'payments': 'list[AccountingTypedDocumentPayment]',
        'document_download_url': 'str',
        'document_id': 'int',
        'document_number': 'int'
    }

    attribute_map = {
        'document': 'Document',
        'items': 'Items',
        'payments': 'Payments',
        'document_download_url': 'DocumentDownloadURL',
        'document_id': 'DocumentID',
        'document_number': 'DocumentNumber'
    }

    def __init__(self, document=None, items=None, payments=None, document_download_url=None, document_id=None, document_number=None):  # noqa: E501
        """AccountingDocumentsGetDetailsResponse - a model defined in Swagger"""  # noqa: E501
        self._document = None
        self._items = None
        self._payments = None
        self._document_download_url = None
        self._document_id = None
        self._document_number = None
        self.discriminator = None
        if document is not None:
            self.document = document
        if items is not None:
            self.items = items
        if payments is not None:
            self.payments = payments
        if document_download_url is not None:
            self.document_download_url = document_download_url
        if document_id is not None:
            self.document_id = document_id
        if document_number is not None:
            self.document_number = document_number

    @property
    def document(self):
        """Gets the document of this AccountingDocumentsGetDetailsResponse.  # noqa: E501


        :return: The document of this AccountingDocumentsGetDetailsResponse.  # noqa: E501
        :rtype: AllOfAccountingDocumentsGetDetailsResponseDocument
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this AccountingDocumentsGetDetailsResponse.


        :param document: The document of this AccountingDocumentsGetDetailsResponse.  # noqa: E501
        :type: AllOfAccountingDocumentsGetDetailsResponseDocument
        """

        self._document = document

    @property
    def items(self):
        """Gets the items of this AccountingDocumentsGetDetailsResponse.  # noqa: E501


        :return: The items of this AccountingDocumentsGetDetailsResponse.  # noqa: E501
        :rtype: list[AccountingTypedDocumentItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this AccountingDocumentsGetDetailsResponse.


        :param items: The items of this AccountingDocumentsGetDetailsResponse.  # noqa: E501
        :type: list[AccountingTypedDocumentItem]
        """

        self._items = items

    @property
    def payments(self):
        """Gets the payments of this AccountingDocumentsGetDetailsResponse.  # noqa: E501


        :return: The payments of this AccountingDocumentsGetDetailsResponse.  # noqa: E501
        :rtype: list[AccountingTypedDocumentPayment]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this AccountingDocumentsGetDetailsResponse.


        :param payments: The payments of this AccountingDocumentsGetDetailsResponse.  # noqa: E501
        :type: list[AccountingTypedDocumentPayment]
        """

        self._payments = payments

    @property
    def document_download_url(self):
        """Gets the document_download_url of this AccountingDocumentsGetDetailsResponse.  # noqa: E501

        Document download URL<div><i>Produced document will be original on first visit, or certified copy on additional visits.</i></div>  # noqa: E501

        :return: The document_download_url of this AccountingDocumentsGetDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._document_download_url

    @document_download_url.setter
    def document_download_url(self, document_download_url):
        """Sets the document_download_url of this AccountingDocumentsGetDetailsResponse.

        Document download URL<div><i>Produced document will be original on first visit, or certified copy on additional visits.</i></div>  # noqa: E501

        :param document_download_url: The document_download_url of this AccountingDocumentsGetDetailsResponse.  # noqa: E501
        :type: str
        """

        self._document_download_url = document_download_url

    @property
    def document_id(self):
        """Gets the document_id of this AccountingDocumentsGetDetailsResponse.  # noqa: E501

        OfficeGuy Document identifier<div><i>DocumentID is an internal identifier (also known as Card Number on OfficeGuy). Keep this for further API calls.</i></div>  # noqa: E501

        :return: The document_id of this AccountingDocumentsGetDetailsResponse.  # noqa: E501
        :rtype: int
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this AccountingDocumentsGetDetailsResponse.

        OfficeGuy Document identifier<div><i>DocumentID is an internal identifier (also known as Card Number on OfficeGuy). Keep this for further API calls.</i></div>  # noqa: E501

        :param document_id: The document_id of this AccountingDocumentsGetDetailsResponse.  # noqa: E501
        :type: int
        """

        self._document_id = document_id

    @property
    def document_number(self):
        """Gets the document_number of this AccountingDocumentsGetDetailsResponse.  # noqa: E501

        Document number<div><i>For instance, for Invoice #1000, the DocumentNumber will be 1000.</i></div>  # noqa: E501

        :return: The document_number of this AccountingDocumentsGetDetailsResponse.  # noqa: E501
        :rtype: int
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """Sets the document_number of this AccountingDocumentsGetDetailsResponse.

        Document number<div><i>For instance, for Invoice #1000, the DocumentNumber will be 1000.</i></div>  # noqa: E501

        :param document_number: The document_number of this AccountingDocumentsGetDetailsResponse.  # noqa: E501
        :type: int
        """

        self._document_number = document_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountingDocumentsGetDetailsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountingDocumentsGetDetailsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
