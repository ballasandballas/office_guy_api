# coding: utf-8

"""
    OfficeGuy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreditGuyGatewayGetTransactionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'unique_identifier': 'str',
        'include_first_digits': 'bool',
        'credentials': 'CoreAPIPublicCredentials'
    }

    attribute_map = {
        'id': 'ID',
        'unique_identifier': 'UniqueIdentifier',
        'include_first_digits': 'IncludeFirstDigits',
        'credentials': 'Credentials'
    }

    def __init__(self, id=None, unique_identifier=None, include_first_digits=None, credentials=None):  # noqa: E501
        """CreditGuyGatewayGetTransactionRequest - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._unique_identifier = None
        self._include_first_digits = None
        self._credentials = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if unique_identifier is not None:
            self.unique_identifier = unique_identifier
        if include_first_digits is not None:
            self.include_first_digits = include_first_digits
        self.credentials = credentials

    @property
    def id(self):
        """Gets the id of this CreditGuyGatewayGetTransactionRequest.  # noqa: E501

        Transaction ID  # noqa: E501

        :return: The id of this CreditGuyGatewayGetTransactionRequest.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreditGuyGatewayGetTransactionRequest.

        Transaction ID  # noqa: E501

        :param id: The id of this CreditGuyGatewayGetTransactionRequest.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this CreditGuyGatewayGetTransactionRequest.  # noqa: E501

        Unique transaction identifer  # noqa: E501

        :return: The unique_identifier of this CreditGuyGatewayGetTransactionRequest.  # noqa: E501
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this CreditGuyGatewayGetTransactionRequest.

        Unique transaction identifer  # noqa: E501

        :param unique_identifier: The unique_identifier of this CreditGuyGatewayGetTransactionRequest.  # noqa: E501
        :type: str
        """

        self._unique_identifier = unique_identifier

    @property
    def include_first_digits(self):
        """Gets the include_first_digits of this CreditGuyGatewayGetTransactionRequest.  # noqa: E501

        Indicates whether to fetch the first 2/6 digits of the card number as well.  Defaults to False  # noqa: E501

        :return: The include_first_digits of this CreditGuyGatewayGetTransactionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_first_digits

    @include_first_digits.setter
    def include_first_digits(self, include_first_digits):
        """Sets the include_first_digits of this CreditGuyGatewayGetTransactionRequest.

        Indicates whether to fetch the first 2/6 digits of the card number as well.  Defaults to False  # noqa: E501

        :param include_first_digits: The include_first_digits of this CreditGuyGatewayGetTransactionRequest.  # noqa: E501
        :type: bool
        """

        self._include_first_digits = include_first_digits

    @property
    def credentials(self):
        """Gets the credentials of this CreditGuyGatewayGetTransactionRequest.  # noqa: E501

        Company API public credentials  # noqa: E501

        :return: The credentials of this CreditGuyGatewayGetTransactionRequest.  # noqa: E501
        :rtype: CoreAPIPublicCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this CreditGuyGatewayGetTransactionRequest.

        Company API public credentials  # noqa: E501

        :param credentials: The credentials of this CreditGuyGatewayGetTransactionRequest.  # noqa: E501
        :type: CoreAPIPublicCredentials
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501

        self._credentials = credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditGuyGatewayGetTransactionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditGuyGatewayGetTransactionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
