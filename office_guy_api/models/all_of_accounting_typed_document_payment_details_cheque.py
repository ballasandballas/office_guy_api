# coding: utf-8

"""
    OfficeGuy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-06-20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AllOfAccountingTypedDocumentPaymentDetailsCheque(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bank_number': 'int',
        'branch_number': 'int',
        'account_number': 'str',
        'cheque_number': 'str',
        'due_date': 'datetime'
    }
    if hasattr(AccountingTypedPaymentCheque, "swagger_types"):
        swagger_types.update(AccountingTypedPaymentCheque.swagger_types)

    attribute_map = {
        'bank_number': 'BankNumber',
        'branch_number': 'BranchNumber',
        'account_number': 'AccountNumber',
        'cheque_number': 'ChequeNumber',
        'due_date': 'DueDate'
    }
    if hasattr(AccountingTypedPaymentCheque, "attribute_map"):
        attribute_map.update(AccountingTypedPaymentCheque.attribute_map)

    def __init__(self, bank_number=None, branch_number=None, account_number=None, cheque_number=None, due_date=None, *args, **kwargs):  # noqa: E501
        """AllOfAccountingTypedDocumentPaymentDetailsCheque - a model defined in Swagger"""  # noqa: E501
        self._bank_number = None
        self._branch_number = None
        self._account_number = None
        self._cheque_number = None
        self._due_date = None
        self.discriminator = None
        self.bank_number = bank_number
        self.branch_number = branch_number
        self.account_number = account_number
        self.cheque_number = cheque_number
        if due_date is not None:
            self.due_date = due_date
        AccountingTypedPaymentCheque.__init__(self, *args, **kwargs)

    @property
    def bank_number(self):
        """Gets the bank_number of this AllOfAccountingTypedDocumentPaymentDetailsCheque.  # noqa: E501

        Israeli bank number<div><i>For instance, 12 indicates Bank Hapoalim.</i></div>  # noqa: E501

        :return: The bank_number of this AllOfAccountingTypedDocumentPaymentDetailsCheque.  # noqa: E501
        :rtype: int
        """
        return self._bank_number

    @bank_number.setter
    def bank_number(self, bank_number):
        """Sets the bank_number of this AllOfAccountingTypedDocumentPaymentDetailsCheque.

        Israeli bank number<div><i>For instance, 12 indicates Bank Hapoalim.</i></div>  # noqa: E501

        :param bank_number: The bank_number of this AllOfAccountingTypedDocumentPaymentDetailsCheque.  # noqa: E501
        :type: int
        """
        if bank_number is None:
            raise ValueError("Invalid value for `bank_number`, must not be `None`")  # noqa: E501

        self._bank_number = bank_number

    @property
    def branch_number(self):
        """Gets the branch_number of this AllOfAccountingTypedDocumentPaymentDetailsCheque.  # noqa: E501

        Israeli bank branch number  # noqa: E501

        :return: The branch_number of this AllOfAccountingTypedDocumentPaymentDetailsCheque.  # noqa: E501
        :rtype: int
        """
        return self._branch_number

    @branch_number.setter
    def branch_number(self, branch_number):
        """Sets the branch_number of this AllOfAccountingTypedDocumentPaymentDetailsCheque.

        Israeli bank branch number  # noqa: E501

        :param branch_number: The branch_number of this AllOfAccountingTypedDocumentPaymentDetailsCheque.  # noqa: E501
        :type: int
        """
        if branch_number is None:
            raise ValueError("Invalid value for `branch_number`, must not be `None`")  # noqa: E501

        self._branch_number = branch_number

    @property
    def account_number(self):
        """Gets the account_number of this AllOfAccountingTypedDocumentPaymentDetailsCheque.  # noqa: E501

        Bank account number  # noqa: E501

        :return: The account_number of this AllOfAccountingTypedDocumentPaymentDetailsCheque.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this AllOfAccountingTypedDocumentPaymentDetailsCheque.

        Bank account number  # noqa: E501

        :param account_number: The account_number of this AllOfAccountingTypedDocumentPaymentDetailsCheque.  # noqa: E501
        :type: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")  # noqa: E501

        self._account_number = account_number

    @property
    def cheque_number(self):
        """Gets the cheque_number of this AllOfAccountingTypedDocumentPaymentDetailsCheque.  # noqa: E501

        Cheque number  # noqa: E501

        :return: The cheque_number of this AllOfAccountingTypedDocumentPaymentDetailsCheque.  # noqa: E501
        :rtype: str
        """
        return self._cheque_number

    @cheque_number.setter
    def cheque_number(self, cheque_number):
        """Sets the cheque_number of this AllOfAccountingTypedDocumentPaymentDetailsCheque.

        Cheque number  # noqa: E501

        :param cheque_number: The cheque_number of this AllOfAccountingTypedDocumentPaymentDetailsCheque.  # noqa: E501
        :type: str
        """
        if cheque_number is None:
            raise ValueError("Invalid value for `cheque_number`, must not be `None`")  # noqa: E501

        self._cheque_number = cheque_number

    @property
    def due_date(self):
        """Gets the due_date of this AllOfAccountingTypedDocumentPaymentDetailsCheque.  # noqa: E501

        Due date  # noqa: E501

        :return: The due_date of this AllOfAccountingTypedDocumentPaymentDetailsCheque.  # noqa: E501
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this AllOfAccountingTypedDocumentPaymentDetailsCheque.

        Due date  # noqa: E501

        :param due_date: The due_date of this AllOfAccountingTypedDocumentPaymentDetailsCheque.  # noqa: E501
        :type: datetime
        """

        self._due_date = due_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllOfAccountingTypedDocumentPaymentDetailsCheque, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllOfAccountingTypedDocumentPaymentDetailsCheque):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
