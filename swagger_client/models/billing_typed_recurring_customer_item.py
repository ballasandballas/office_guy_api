# coding: utf-8

"""
    OfficeGuy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BillingTypedRecurringCustomerItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'item': 'BillingTypedRecurringItem',
        'quantity': 'float',
        'unit_price': 'float',
        'date_start': 'datetime',
        'date_end': 'datetime',
        'date_next_billing': 'datetime',
        'date_previous_billing': 'datetime',
        'status': 'str',
        'description': 'str'
    }

    attribute_map = {
        'id': 'ID',
        'item': 'Item',
        'quantity': 'Quantity',
        'unit_price': 'UnitPrice',
        'date_start': 'Date_Start',
        'date_end': 'Date_End',
        'date_next_billing': 'Date_NextBilling',
        'date_previous_billing': 'Date_PreviousBilling',
        'status': 'Status',
        'description': 'Description'
    }

    def __init__(self, id=None, item=None, quantity=None, unit_price=None, date_start=None, date_end=None, date_next_billing=None, date_previous_billing=None, status=None, description=None):  # noqa: E501
        """BillingTypedRecurringCustomerItem - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._item = None
        self._quantity = None
        self._unit_price = None
        self._date_start = None
        self._date_end = None
        self._date_next_billing = None
        self._date_previous_billing = None
        self._status = None
        self._description = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if item is not None:
            self.item = item
        if quantity is not None:
            self.quantity = quantity
        if unit_price is not None:
            self.unit_price = unit_price
        if date_start is not None:
            self.date_start = date_start
        if date_end is not None:
            self.date_end = date_end
        if date_next_billing is not None:
            self.date_next_billing = date_next_billing
        if date_previous_billing is not None:
            self.date_previous_billing = date_previous_billing
        if status is not None:
            self.status = status
        if description is not None:
            self.description = description

    @property
    def id(self):
        """Gets the id of this BillingTypedRecurringCustomerItem.  # noqa: E501

        Identifier  # noqa: E501

        :return: The id of this BillingTypedRecurringCustomerItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BillingTypedRecurringCustomerItem.

        Identifier  # noqa: E501

        :param id: The id of this BillingTypedRecurringCustomerItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def item(self):
        """Gets the item of this BillingTypedRecurringCustomerItem.  # noqa: E501

        Item  # noqa: E501

        :return: The item of this BillingTypedRecurringCustomerItem.  # noqa: E501
        :rtype: BillingTypedRecurringItem
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this BillingTypedRecurringCustomerItem.

        Item  # noqa: E501

        :param item: The item of this BillingTypedRecurringCustomerItem.  # noqa: E501
        :type: BillingTypedRecurringItem
        """

        self._item = item

    @property
    def quantity(self):
        """Gets the quantity of this BillingTypedRecurringCustomerItem.  # noqa: E501

        Quantity<div><i>Defaults to 1</i></div>  # noqa: E501

        :return: The quantity of this BillingTypedRecurringCustomerItem.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this BillingTypedRecurringCustomerItem.

        Quantity<div><i>Defaults to 1</i></div>  # noqa: E501

        :param quantity: The quantity of this BillingTypedRecurringCustomerItem.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def unit_price(self):
        """Gets the unit_price of this BillingTypedRecurringCustomerItem.  # noqa: E501

        Price<div><i>Defaults to 0</i></div>  # noqa: E501

        :return: The unit_price of this BillingTypedRecurringCustomerItem.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this BillingTypedRecurringCustomerItem.

        Price<div><i>Defaults to 0</i></div>  # noqa: E501

        :param unit_price: The unit_price of this BillingTypedRecurringCustomerItem.  # noqa: E501
        :type: float
        """

        self._unit_price = unit_price

    @property
    def date_start(self):
        """Gets the date_start of this BillingTypedRecurringCustomerItem.  # noqa: E501

        First payment date  # noqa: E501

        :return: The date_start of this BillingTypedRecurringCustomerItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this BillingTypedRecurringCustomerItem.

        First payment date  # noqa: E501

        :param date_start: The date_start of this BillingTypedRecurringCustomerItem.  # noqa: E501
        :type: datetime
        """

        self._date_start = date_start

    @property
    def date_end(self):
        """Gets the date_end of this BillingTypedRecurringCustomerItem.  # noqa: E501

        Last payment date  # noqa: E501

        :return: The date_end of this BillingTypedRecurringCustomerItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this BillingTypedRecurringCustomerItem.

        Last payment date  # noqa: E501

        :param date_end: The date_end of this BillingTypedRecurringCustomerItem.  # noqa: E501
        :type: datetime
        """

        self._date_end = date_end

    @property
    def date_next_billing(self):
        """Gets the date_next_billing of this BillingTypedRecurringCustomerItem.  # noqa: E501

        Next payment date  # noqa: E501

        :return: The date_next_billing of this BillingTypedRecurringCustomerItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_next_billing

    @date_next_billing.setter
    def date_next_billing(self, date_next_billing):
        """Sets the date_next_billing of this BillingTypedRecurringCustomerItem.

        Next payment date  # noqa: E501

        :param date_next_billing: The date_next_billing of this BillingTypedRecurringCustomerItem.  # noqa: E501
        :type: datetime
        """

        self._date_next_billing = date_next_billing

    @property
    def date_previous_billing(self):
        """Gets the date_previous_billing of this BillingTypedRecurringCustomerItem.  # noqa: E501

        Previous payment date  # noqa: E501

        :return: The date_previous_billing of this BillingTypedRecurringCustomerItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_previous_billing

    @date_previous_billing.setter
    def date_previous_billing(self, date_previous_billing):
        """Sets the date_previous_billing of this BillingTypedRecurringCustomerItem.

        Previous payment date  # noqa: E501

        :param date_previous_billing: The date_previous_billing of this BillingTypedRecurringCustomerItem.  # noqa: E501
        :type: datetime
        """

        self._date_previous_billing = date_previous_billing

    @property
    def status(self):
        """Gets the status of this BillingTypedRecurringCustomerItem.  # noqa: E501

        Item status  # noqa: E501

        :return: The status of this BillingTypedRecurringCustomerItem.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BillingTypedRecurringCustomerItem.

        Item status  # noqa: E501

        :param status: The status of this BillingTypedRecurringCustomerItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["Active", "Cancelled", "DisabledFailedBillingPayment", "FinishedExpired", "GracePeriod", "PendingForFirstPayment", "CancelledByCustomer"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def description(self):
        """Gets the description of this BillingTypedRecurringCustomerItem.  # noqa: E501

        Recurring record description  # noqa: E501

        :return: The description of this BillingTypedRecurringCustomerItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BillingTypedRecurringCustomerItem.

        Recurring record description  # noqa: E501

        :param description: The description of this BillingTypedRecurringCustomerItem.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BillingTypedRecurringCustomerItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillingTypedRecurringCustomerItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
