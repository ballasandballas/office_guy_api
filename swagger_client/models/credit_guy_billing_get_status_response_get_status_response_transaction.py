# coding: utf-8

"""
    OfficeGuy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreditGuyBillingGetStatusResponseGetStatusResponseTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'checkout_index': 'str',
        'checkout_record_index': 'str',
        'reference_number': 'int',
        'auth_number': 'str',
        'unique_identifier': 'str',
        'status': 'str',
        'result_code': 'str'
    }

    attribute_map = {
        'id': 'ID',
        'checkout_index': 'CheckoutIndex',
        'checkout_record_index': 'CheckoutRecordIndex',
        'reference_number': 'ReferenceNumber',
        'auth_number': 'AuthNumber',
        'unique_identifier': 'UniqueIdentifier',
        'status': 'Status',
        'result_code': 'ResultCode'
    }

    def __init__(self, id=None, checkout_index=None, checkout_record_index=None, reference_number=None, auth_number=None, unique_identifier=None, status=None, result_code=None):  # noqa: E501
        """CreditGuyBillingGetStatusResponseGetStatusResponseTransaction - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._checkout_index = None
        self._checkout_record_index = None
        self._reference_number = None
        self._auth_number = None
        self._unique_identifier = None
        self._status = None
        self._result_code = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if checkout_index is not None:
            self.checkout_index = checkout_index
        if checkout_record_index is not None:
            self.checkout_record_index = checkout_record_index
        if reference_number is not None:
            self.reference_number = reference_number
        if auth_number is not None:
            self.auth_number = auth_number
        if unique_identifier is not None:
            self.unique_identifier = unique_identifier
        if status is not None:
            self.status = status
        if result_code is not None:
            self.result_code = result_code

    @property
    def id(self):
        """Gets the id of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501


        :return: The id of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.


        :param id: The id of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def checkout_index(self):
        """Gets the checkout_index of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501


        :return: The checkout_index of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501
        :rtype: str
        """
        return self._checkout_index

    @checkout_index.setter
    def checkout_index(self, checkout_index):
        """Sets the checkout_index of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.


        :param checkout_index: The checkout_index of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501
        :type: str
        """

        self._checkout_index = checkout_index

    @property
    def checkout_record_index(self):
        """Gets the checkout_record_index of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501


        :return: The checkout_record_index of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501
        :rtype: str
        """
        return self._checkout_record_index

    @checkout_record_index.setter
    def checkout_record_index(self, checkout_record_index):
        """Sets the checkout_record_index of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.


        :param checkout_record_index: The checkout_record_index of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501
        :type: str
        """

        self._checkout_record_index = checkout_record_index

    @property
    def reference_number(self):
        """Gets the reference_number of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501


        :return: The reference_number of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501
        :rtype: int
        """
        return self._reference_number

    @reference_number.setter
    def reference_number(self, reference_number):
        """Sets the reference_number of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.


        :param reference_number: The reference_number of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501
        :type: int
        """

        self._reference_number = reference_number

    @property
    def auth_number(self):
        """Gets the auth_number of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501


        :return: The auth_number of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501
        :rtype: str
        """
        return self._auth_number

    @auth_number.setter
    def auth_number(self, auth_number):
        """Sets the auth_number of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.


        :param auth_number: The auth_number of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501
        :type: str
        """

        self._auth_number = auth_number

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501


        :return: The unique_identifier of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.


        :param unique_identifier: The unique_identifier of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501
        :type: str
        """

        self._unique_identifier = unique_identifier

    @property
    def status(self):
        """Gets the status of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501


        :return: The status of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.


        :param status: The status of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["Transmit_Valid", "Deposit_Valid", "Deposit_NotNeeded", "Transmit_Invalid", "Deposit_Invalid", "Billing_Pending"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def result_code(self):
        """Gets the result_code of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501


        :return: The result_code of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.


        :param result_code: The result_code of this CreditGuyBillingGetStatusResponseGetStatusResponseTransaction.  # noqa: E501
        :type: str
        """

        self._result_code = result_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditGuyBillingGetStatusResponseGetStatusResponseTransaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditGuyBillingGetStatusResponseGetStatusResponseTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
