# coding: utf-8

"""
    OfficeGuy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-06-20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body130(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schema_id': 'int',
        'view_id': 'int',
        'pdf': 'bool',
        'credentials': 'Object'
    }
    if hasattr(CRMDataGetEntitiesHTMLRequest, "swagger_types"):
        swagger_types.update(CRMDataGetEntitiesHTMLRequest.swagger_types)

    attribute_map = {
        'schema_id': 'SchemaID',
        'view_id': 'ViewID',
        'pdf': 'PDF',
        'credentials': 'Credentials'
    }
    if hasattr(CRMDataGetEntitiesHTMLRequest, "attribute_map"):
        attribute_map.update(CRMDataGetEntitiesHTMLRequest.attribute_map)

    def __init__(self, schema_id=None, view_id=None, pdf=None, credentials=None, *args, **kwargs):  # noqa: E501
        """Body130 - a model defined in Swagger"""  # noqa: E501
        self._schema_id = None
        self._view_id = None
        self._pdf = None
        self._credentials = None
        self.discriminator = None
        self.schema_id = schema_id
        self.view_id = view_id
        if pdf is not None:
            self.pdf = pdf
        self.credentials = credentials
        CRMDataGetEntitiesHTMLRequest.__init__(self, *args, **kwargs)

    @property
    def schema_id(self):
        """Gets the schema_id of this Body130.  # noqa: E501

        Schema identifier  # noqa: E501

        :return: The schema_id of this Body130.  # noqa: E501
        :rtype: int
        """
        return self._schema_id

    @schema_id.setter
    def schema_id(self, schema_id):
        """Sets the schema_id of this Body130.

        Schema identifier  # noqa: E501

        :param schema_id: The schema_id of this Body130.  # noqa: E501
        :type: int
        """
        if schema_id is None:
            raise ValueError("Invalid value for `schema_id`, must not be `None`")  # noqa: E501

        self._schema_id = schema_id

    @property
    def view_id(self):
        """Gets the view_id of this Body130.  # noqa: E501

        View identifier  # noqa: E501

        :return: The view_id of this Body130.  # noqa: E501
        :rtype: int
        """
        return self._view_id

    @view_id.setter
    def view_id(self, view_id):
        """Sets the view_id of this Body130.

        View identifier  # noqa: E501

        :param view_id: The view_id of this Body130.  # noqa: E501
        :type: int
        """
        if view_id is None:
            raise ValueError("Invalid value for `view_id`, must not be `None`")  # noqa: E501

        self._view_id = view_id

    @property
    def pdf(self):
        """Gets the pdf of this Body130.  # noqa: E501

        Get PDF instead of HTML<div><i>Defaults to False</i></div>  # noqa: E501

        :return: The pdf of this Body130.  # noqa: E501
        :rtype: bool
        """
        return self._pdf

    @pdf.setter
    def pdf(self, pdf):
        """Sets the pdf of this Body130.

        Get PDF instead of HTML<div><i>Defaults to False</i></div>  # noqa: E501

        :param pdf: The pdf of this Body130.  # noqa: E501
        :type: bool
        """

        self._pdf = pdf

    @property
    def credentials(self):
        """Gets the credentials of this Body130.  # noqa: E501

        Company API credentials  # noqa: E501

        :return: The credentials of this Body130.  # noqa: E501
        :rtype: Object
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this Body130.

        Company API credentials  # noqa: E501

        :param credentials: The credentials of this Body130.  # noqa: E501
        :type: Object
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501

        self._credentials = credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body130, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body130):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
