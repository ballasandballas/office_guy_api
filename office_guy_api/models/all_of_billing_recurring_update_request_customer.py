# coding: utf-8

"""
    OfficeGuy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-06-20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AllOfBillingRecurringUpdateRequestCustomer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'external_identifier': 'str',
        'no_vat': 'bool',
        'search_mode': 'Object',
        'name': 'str',
        'phone': 'str',
        'email_address': 'str',
        'city': 'str',
        'address': 'str',
        'zip_code': 'str',
        'company_number': 'str',
        'id': 'int',
        'folder': 'str',
        'properties': 'dict(str, object)'
    }
    if hasattr(AccountingTypedCustomer, "swagger_types"):
        swagger_types.update(AccountingTypedCustomer.swagger_types)

    attribute_map = {
        'external_identifier': 'ExternalIdentifier',
        'no_vat': 'NoVAT',
        'search_mode': 'SearchMode',
        'name': 'Name',
        'phone': 'Phone',
        'email_address': 'EmailAddress',
        'city': 'City',
        'address': 'Address',
        'zip_code': 'ZipCode',
        'company_number': 'CompanyNumber',
        'id': 'ID',
        'folder': 'Folder',
        'properties': 'Properties'
    }
    if hasattr(AccountingTypedCustomer, "attribute_map"):
        attribute_map.update(AccountingTypedCustomer.attribute_map)

    def __init__(self, external_identifier=None, no_vat=None, search_mode=None, name=None, phone=None, email_address=None, city=None, address=None, zip_code=None, company_number=None, id=None, folder=None, properties=None, *args, **kwargs):  # noqa: E501
        """AllOfBillingRecurringUpdateRequestCustomer - a model defined in Swagger"""  # noqa: E501
        self._external_identifier = None
        self._no_vat = None
        self._search_mode = None
        self._name = None
        self._phone = None
        self._email_address = None
        self._city = None
        self._address = None
        self._zip_code = None
        self._company_number = None
        self._id = None
        self._folder = None
        self._properties = None
        self.discriminator = None
        if external_identifier is not None:
            self.external_identifier = external_identifier
        if no_vat is not None:
            self.no_vat = no_vat
        if search_mode is not None:
            self.search_mode = search_mode
        if name is not None:
            self.name = name
        if phone is not None:
            self.phone = phone
        if email_address is not None:
            self.email_address = email_address
        if city is not None:
            self.city = city
        if address is not None:
            self.address = address
        if zip_code is not None:
            self.zip_code = zip_code
        if company_number is not None:
            self.company_number = company_number
        if id is not None:
            self.id = id
        if folder is not None:
            self.folder = folder
        if properties is not None:
            self.properties = properties
        AccountingTypedCustomer.__init__(self, *args, **kwargs)

    @property
    def external_identifier(self):
        """Gets the external_identifier of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501

        Customer external identifier.<div><i>External identifier from calling application.  Optional field</i></div>  # noqa: E501

        :return: The external_identifier of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :rtype: str
        """
        return self._external_identifier

    @external_identifier.setter
    def external_identifier(self, external_identifier):
        """Sets the external_identifier of this AllOfBillingRecurringUpdateRequestCustomer.

        Customer external identifier.<div><i>External identifier from calling application.  Optional field</i></div>  # noqa: E501

        :param external_identifier: The external_identifier of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :type: str
        """

        self._external_identifier = external_identifier

    @property
    def no_vat(self):
        """Gets the no_vat of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501

        NoVAT indication<div><i>Set to true for VAT exempt customers  Defaults to False</i></div>  # noqa: E501

        :return: The no_vat of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :rtype: bool
        """
        return self._no_vat

    @no_vat.setter
    def no_vat(self, no_vat):
        """Sets the no_vat of this AllOfBillingRecurringUpdateRequestCustomer.

        NoVAT indication<div><i>Set to true for VAT exempt customers  Defaults to False</i></div>  # noqa: E501

        :param no_vat: The no_vat of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :type: bool
        """

        self._no_vat = no_vat

    @property
    def search_mode(self):
        """Gets the search_mode of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501

        Customer searching mode<div><i>Defaults to None</i></div>  # noqa: E501

        :return: The search_mode of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :rtype: Object
        """
        return self._search_mode

    @search_mode.setter
    def search_mode(self, search_mode):
        """Sets the search_mode of this AllOfBillingRecurringUpdateRequestCustomer.

        Customer searching mode<div><i>Defaults to None</i></div>  # noqa: E501

        :param search_mode: The search_mode of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :type: Object
        """

        self._search_mode = search_mode

    @property
    def name(self):
        """Gets the name of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501

        Customer full name (or company name)<div><i>Required for creating new customer  (Leave empty to search by other fields)</i></div>  # noqa: E501

        :return: The name of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AllOfBillingRecurringUpdateRequestCustomer.

        Customer full name (or company name)<div><i>Required for creating new customer  (Leave empty to search by other fields)</i></div>  # noqa: E501

        :param name: The name of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501

        Customer phone number<div><i>Optional field</i></div>  # noqa: E501

        :return: The phone of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this AllOfBillingRecurringUpdateRequestCustomer.

        Customer phone number<div><i>Optional field</i></div>  # noqa: E501

        :param phone: The phone of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def email_address(self):
        """Gets the email_address of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501

        Customer email address<div><i>Optional field</i></div>  # noqa: E501

        :return: The email_address of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this AllOfBillingRecurringUpdateRequestCustomer.

        Customer email address<div><i>Optional field</i></div>  # noqa: E501

        :param email_address: The email_address of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def city(self):
        """Gets the city of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501

        Customer city<div><i>Optional field</i></div>  # noqa: E501

        :return: The city of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AllOfBillingRecurringUpdateRequestCustomer.

        Customer city<div><i>Optional field</i></div>  # noqa: E501

        :param city: The city of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def address(self):
        """Gets the address of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501

        Customer address<div><i>Optional field</i></div>  # noqa: E501

        :return: The address of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AllOfBillingRecurringUpdateRequestCustomer.

        Customer address<div><i>Optional field</i></div>  # noqa: E501

        :param address: The address of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def zip_code(self):
        """Gets the zip_code of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501

        Customer ZipCode<div><i>Optional field</i></div>  # noqa: E501

        :return: The zip_code of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this AllOfBillingRecurringUpdateRequestCustomer.

        Customer ZipCode<div><i>Optional field</i></div>  # noqa: E501

        :param zip_code: The zip_code of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    @property
    def company_number(self):
        """Gets the company_number of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501

        Customer registered company number (VAT number)<div><i>Optional field</i></div>  # noqa: E501

        :return: The company_number of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :rtype: str
        """
        return self._company_number

    @company_number.setter
    def company_number(self, company_number):
        """Sets the company_number of this AllOfBillingRecurringUpdateRequestCustomer.

        Customer registered company number (VAT number)<div><i>Optional field</i></div>  # noqa: E501

        :param company_number: The company_number of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :type: str
        """

        self._company_number = company_number

    @property
    def id(self):
        """Gets the id of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501

        OfficeGuy identifier<div><i>Leave empty to create a new entity or search by other fields when applicable</i></div>  # noqa: E501

        :return: The id of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AllOfBillingRecurringUpdateRequestCustomer.

        OfficeGuy identifier<div><i>Leave empty to create a new entity or search by other fields when applicable</i></div>  # noqa: E501

        :param id: The id of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def folder(self):
        """Gets the folder of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501

        Folder identifier.<div><i>Can be either application folder name, or FolderID.</i></div>  # noqa: E501

        :return: The folder of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :rtype: str
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this AllOfBillingRecurringUpdateRequestCustomer.

        Folder identifier.<div><i>Can be either application folder name, or FolderID.</i></div>  # noqa: E501

        :param folder: The folder of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :type: str
        """

        self._folder = folder

    @property
    def properties(self):
        """Gets the properties of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501

        Entity fields  # noqa: E501

        :return: The properties of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this AllOfBillingRecurringUpdateRequestCustomer.

        Entity fields  # noqa: E501

        :param properties: The properties of this AllOfBillingRecurringUpdateRequestCustomer.  # noqa: E501
        :type: dict(str, object)
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllOfBillingRecurringUpdateRequestCustomer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllOfBillingRecurringUpdateRequestCustomer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
