# coding: utf-8

"""
    OfficeGuy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-06-20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CRMDataListEntitiesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'folder': 'str',
        'include_inherited_folders': 'bool',
        'filters': 'list[CoreTypedFilter]',
        'order': 'AllOfCRMDataListEntitiesRequestOrder',
        'paging': 'AllOfCRMDataListEntitiesRequestPaging',
        'load_properties': 'bool',
        'credentials': 'AllOfCRMDataListEntitiesRequestCredentials'
    }

    attribute_map = {
        'folder': 'Folder',
        'include_inherited_folders': 'IncludeInheritedFolders',
        'filters': 'Filters',
        'order': 'Order',
        'paging': 'Paging',
        'load_properties': 'LoadProperties',
        'credentials': 'Credentials'
    }

    def __init__(self, folder=None, include_inherited_folders=None, filters=None, order=None, paging=None, load_properties=None, credentials=None):  # noqa: E501
        """CRMDataListEntitiesRequest - a model defined in Swagger"""  # noqa: E501
        self._folder = None
        self._include_inherited_folders = None
        self._filters = None
        self._order = None
        self._paging = None
        self._load_properties = None
        self._credentials = None
        self.discriminator = None
        if folder is not None:
            self.folder = folder
        if include_inherited_folders is not None:
            self.include_inherited_folders = include_inherited_folders
        if filters is not None:
            self.filters = filters
        if order is not None:
            self.order = order
        if paging is not None:
            self.paging = paging
        if load_properties is not None:
            self.load_properties = load_properties
        self.credentials = credentials

    @property
    def folder(self):
        """Gets the folder of this CRMDataListEntitiesRequest.  # noqa: E501

        Folder identifier.<div><i>Can be either application folder name, or FolderID.</i></div>  # noqa: E501

        :return: The folder of this CRMDataListEntitiesRequest.  # noqa: E501
        :rtype: str
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this CRMDataListEntitiesRequest.

        Folder identifier.<div><i>Can be either application folder name, or FolderID.</i></div>  # noqa: E501

        :param folder: The folder of this CRMDataListEntitiesRequest.  # noqa: E501
        :type: str
        """

        self._folder = folder

    @property
    def include_inherited_folders(self):
        """Gets the include_inherited_folders of this CRMDataListEntitiesRequest.  # noqa: E501

        Include entities from inherited folders  # noqa: E501

        :return: The include_inherited_folders of this CRMDataListEntitiesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_inherited_folders

    @include_inherited_folders.setter
    def include_inherited_folders(self, include_inherited_folders):
        """Sets the include_inherited_folders of this CRMDataListEntitiesRequest.

        Include entities from inherited folders  # noqa: E501

        :param include_inherited_folders: The include_inherited_folders of this CRMDataListEntitiesRequest.  # noqa: E501
        :type: bool
        """

        self._include_inherited_folders = include_inherited_folders

    @property
    def filters(self):
        """Gets the filters of this CRMDataListEntitiesRequest.  # noqa: E501

        List filters  # noqa: E501

        :return: The filters of this CRMDataListEntitiesRequest.  # noqa: E501
        :rtype: list[CoreTypedFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this CRMDataListEntitiesRequest.

        List filters  # noqa: E501

        :param filters: The filters of this CRMDataListEntitiesRequest.  # noqa: E501
        :type: list[CoreTypedFilter]
        """

        self._filters = filters

    @property
    def order(self):
        """Gets the order of this CRMDataListEntitiesRequest.  # noqa: E501

        List results order (sort)  # noqa: E501

        :return: The order of this CRMDataListEntitiesRequest.  # noqa: E501
        :rtype: AllOfCRMDataListEntitiesRequestOrder
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this CRMDataListEntitiesRequest.

        List results order (sort)  # noqa: E501

        :param order: The order of this CRMDataListEntitiesRequest.  # noqa: E501
        :type: AllOfCRMDataListEntitiesRequestOrder
        """

        self._order = order

    @property
    def paging(self):
        """Gets the paging of this CRMDataListEntitiesRequest.  # noqa: E501

        List paging  # noqa: E501

        :return: The paging of this CRMDataListEntitiesRequest.  # noqa: E501
        :rtype: AllOfCRMDataListEntitiesRequestPaging
        """
        return self._paging

    @paging.setter
    def paging(self, paging):
        """Sets the paging of this CRMDataListEntitiesRequest.

        List paging  # noqa: E501

        :param paging: The paging of this CRMDataListEntitiesRequest.  # noqa: E501
        :type: AllOfCRMDataListEntitiesRequestPaging
        """

        self._paging = paging

    @property
    def load_properties(self):
        """Gets the load_properties of this CRMDataListEntitiesRequest.  # noqa: E501

        Load results properties<div><i>Defaults to false</i></div>  # noqa: E501

        :return: The load_properties of this CRMDataListEntitiesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._load_properties

    @load_properties.setter
    def load_properties(self, load_properties):
        """Sets the load_properties of this CRMDataListEntitiesRequest.

        Load results properties<div><i>Defaults to false</i></div>  # noqa: E501

        :param load_properties: The load_properties of this CRMDataListEntitiesRequest.  # noqa: E501
        :type: bool
        """

        self._load_properties = load_properties

    @property
    def credentials(self):
        """Gets the credentials of this CRMDataListEntitiesRequest.  # noqa: E501

        Company API credentials  # noqa: E501

        :return: The credentials of this CRMDataListEntitiesRequest.  # noqa: E501
        :rtype: AllOfCRMDataListEntitiesRequestCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this CRMDataListEntitiesRequest.

        Company API credentials  # noqa: E501

        :param credentials: The credentials of this CRMDataListEntitiesRequest.  # noqa: E501
        :type: AllOfCRMDataListEntitiesRequestCredentials
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501

        self._credentials = credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CRMDataListEntitiesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CRMDataListEntitiesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
