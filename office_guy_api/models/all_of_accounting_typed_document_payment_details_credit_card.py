# coding: utf-8

"""
    OfficeGuy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-06-20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AllOfAccountingTypedDocumentPaymentDetailsCreditCard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card_brand': 'str',
        'last4_digits': 'str'
    }
    if hasattr(AccountingTypedPaymentCreditCard, "swagger_types"):
        swagger_types.update(AccountingTypedPaymentCreditCard.swagger_types)

    attribute_map = {
        'card_brand': 'CardBrand',
        'last4_digits': 'Last4Digits'
    }
    if hasattr(AccountingTypedPaymentCreditCard, "attribute_map"):
        attribute_map.update(AccountingTypedPaymentCreditCard.attribute_map)

    def __init__(self, card_brand=None, last4_digits=None, *args, **kwargs):  # noqa: E501
        """AllOfAccountingTypedDocumentPaymentDetailsCreditCard - a model defined in Swagger"""  # noqa: E501
        self._card_brand = None
        self._last4_digits = None
        self.discriminator = None
        if card_brand is not None:
            self.card_brand = card_brand
        self.last4_digits = last4_digits
        AccountingTypedPaymentCreditCard.__init__(self, *args, **kwargs)

    @property
    def card_brand(self):
        """Gets the card_brand of this AllOfAccountingTypedDocumentPaymentDetailsCreditCard.  # noqa: E501

        Credit card brand  # noqa: E501

        :return: The card_brand of this AllOfAccountingTypedDocumentPaymentDetailsCreditCard.  # noqa: E501
        :rtype: str
        """
        return self._card_brand

    @card_brand.setter
    def card_brand(self, card_brand):
        """Sets the card_brand of this AllOfAccountingTypedDocumentPaymentDetailsCreditCard.

        Credit card brand  # noqa: E501

        :param card_brand: The card_brand of this AllOfAccountingTypedDocumentPaymentDetailsCreditCard.  # noqa: E501
        :type: str
        """

        self._card_brand = card_brand

    @property
    def last4_digits(self):
        """Gets the last4_digits of this AllOfAccountingTypedDocumentPaymentDetailsCreditCard.  # noqa: E501

        Last 4 credit card digits  # noqa: E501

        :return: The last4_digits of this AllOfAccountingTypedDocumentPaymentDetailsCreditCard.  # noqa: E501
        :rtype: str
        """
        return self._last4_digits

    @last4_digits.setter
    def last4_digits(self, last4_digits):
        """Sets the last4_digits of this AllOfAccountingTypedDocumentPaymentDetailsCreditCard.

        Last 4 credit card digits  # noqa: E501

        :param last4_digits: The last4_digits of this AllOfAccountingTypedDocumentPaymentDetailsCreditCard.  # noqa: E501
        :type: str
        """
        if last4_digits is None:
            raise ValueError("Invalid value for `last4_digits`, must not be `None`")  # noqa: E501

        self._last4_digits = last4_digits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllOfAccountingTypedDocumentPaymentDetailsCreditCard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllOfAccountingTypedDocumentPaymentDetailsCreditCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
