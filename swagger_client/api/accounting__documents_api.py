# coding: utf-8

"""
    OfficeGuy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AccountingDocumentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def accounting_documents_add_expense(self, **kwargs):  # noqa: E501
        """Add expense  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounting_documents_add_expense(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountingDocumentsAddExpenseRequest request:
        :param str content_language: Sets the content response language. Defaults to Hebrew (he).
        :return: ResponseAccountingDocumentsAddExpenseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounting_documents_add_expense_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accounting_documents_add_expense_with_http_info(**kwargs)  # noqa: E501
            return data

    def accounting_documents_add_expense_with_http_info(self, **kwargs):  # noqa: E501
        """Add expense  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounting_documents_add_expense_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountingDocumentsAddExpenseRequest request:
        :param str content_language: Sets the content response language. Defaults to Hebrew (he).
        :return: ResponseAccountingDocumentsAddExpenseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'content_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounting_documents_add_expense" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'content_language' in params:
            header_params['Content-Language'] = params['content_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/accounting/documents/addexpense/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseAccountingDocumentsAddExpenseResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounting_documents_cancel(self, **kwargs):  # noqa: E501
        """Cancel document (Also known as storno).  # noqa: E501

        Please note cancelling documents is allowed within the same calendar day of the document creation date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounting_documents_cancel(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountingDocumentsCancelRequest request:
        :param str content_language: Sets the content response language. Defaults to Hebrew (he).
        :return: ResponseAccountingDocumentsCancelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounting_documents_cancel_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accounting_documents_cancel_with_http_info(**kwargs)  # noqa: E501
            return data

    def accounting_documents_cancel_with_http_info(self, **kwargs):  # noqa: E501
        """Cancel document (Also known as storno).  # noqa: E501

        Please note cancelling documents is allowed within the same calendar day of the document creation date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounting_documents_cancel_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountingDocumentsCancelRequest request:
        :param str content_language: Sets the content response language. Defaults to Hebrew (he).
        :return: ResponseAccountingDocumentsCancelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'content_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounting_documents_cancel" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'content_language' in params:
            header_params['Content-Language'] = params['content_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/accounting/documents/cancel/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseAccountingDocumentsCancelResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounting_documents_create(self, **kwargs):  # noqa: E501
        """Create document  # noqa: E501

        Creates an invoice, receipt, donation receipt, price quotation or any other accounting document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounting_documents_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountingDocumentsCreateRequest request:
        :param str content_language: Sets the content response language. Defaults to Hebrew (he).
        :return: ResponseAccountingDocumentsCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounting_documents_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accounting_documents_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def accounting_documents_create_with_http_info(self, **kwargs):  # noqa: E501
        """Create document  # noqa: E501

        Creates an invoice, receipt, donation receipt, price quotation or any other accounting document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounting_documents_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountingDocumentsCreateRequest request:
        :param str content_language: Sets the content response language. Defaults to Hebrew (he).
        :return: ResponseAccountingDocumentsCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'content_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounting_documents_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'content_language' in params:
            header_params['Content-Language'] = params['content_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/accounting/documents/create/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseAccountingDocumentsCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounting_documents_get_details(self, **kwargs):  # noqa: E501
        """Get document details  # noqa: E501

        Documents can be located either using DocumentID, or a combination of DocumentType and DocumentNumber.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounting_documents_get_details(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountingDocumentsGetDetailsRequest request:
        :param str content_language: Sets the content response language. Defaults to Hebrew (he).
        :return: ResponseAccountingDocumentsGetDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounting_documents_get_details_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accounting_documents_get_details_with_http_info(**kwargs)  # noqa: E501
            return data

    def accounting_documents_get_details_with_http_info(self, **kwargs):  # noqa: E501
        """Get document details  # noqa: E501

        Documents can be located either using DocumentID, or a combination of DocumentType and DocumentNumber.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounting_documents_get_details_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountingDocumentsGetDetailsRequest request:
        :param str content_language: Sets the content response language. Defaults to Hebrew (he).
        :return: ResponseAccountingDocumentsGetDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'content_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounting_documents_get_details" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'content_language' in params:
            header_params['Content-Language'] = params['content_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/accounting/documents/getdetails/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseAccountingDocumentsGetDetailsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounting_documents_get_pdf(self, **kwargs):  # noqa: E501
        """Get document PDF  # noqa: E501

        Documents can be located either using DocumentID, or a combination of DocumentType and DocumentNumber.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounting_documents_get_pdf(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountingDocumentsGetPDFRequest request:
        :param str content_language: Sets the content response language. Defaults to Hebrew (he).
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounting_documents_get_pdf_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accounting_documents_get_pdf_with_http_info(**kwargs)  # noqa: E501
            return data

    def accounting_documents_get_pdf_with_http_info(self, **kwargs):  # noqa: E501
        """Get document PDF  # noqa: E501

        Documents can be located either using DocumentID, or a combination of DocumentType and DocumentNumber.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounting_documents_get_pdf_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountingDocumentsGetPDFRequest request:
        :param str content_language: Sets the content response language. Defaults to Hebrew (he).
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'content_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounting_documents_get_pdf" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'content_language' in params:
            header_params['Content-Language'] = params['content_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/accounting/documents/getpdf/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounting_documents_move_to_books(self, **kwargs):  # noqa: E501
        """Move document to books (Finalize a draft document).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounting_documents_move_to_books(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountingDocumentsMoveToBooksRequest request:
        :param str content_language: Sets the content response language. Defaults to Hebrew (he).
        :return: ResponseAccountingDocumentsMoveToBooksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounting_documents_move_to_books_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accounting_documents_move_to_books_with_http_info(**kwargs)  # noqa: E501
            return data

    def accounting_documents_move_to_books_with_http_info(self, **kwargs):  # noqa: E501
        """Move document to books (Finalize a draft document).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounting_documents_move_to_books_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountingDocumentsMoveToBooksRequest request:
        :param str content_language: Sets the content response language. Defaults to Hebrew (he).
        :return: ResponseAccountingDocumentsMoveToBooksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'content_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounting_documents_move_to_books" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'content_language' in params:
            header_params['Content-Language'] = params['content_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/accounting/documents/movetobooks/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseAccountingDocumentsMoveToBooksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounting_documents_send(self, **kwargs):  # noqa: E501
        """Send document by email  # noqa: E501

        Documents can be located either using DocumentID (EntityID), or a combination of DocumentType and DocumentNumber.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounting_documents_send(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountingDocumentsSendRequest request:
        :param str content_language: Sets the content response language. Defaults to Hebrew (he).
        :return: CoreAPIEmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounting_documents_send_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accounting_documents_send_with_http_info(**kwargs)  # noqa: E501
            return data

    def accounting_documents_send_with_http_info(self, **kwargs):  # noqa: E501
        """Send document by email  # noqa: E501

        Documents can be located either using DocumentID (EntityID), or a combination of DocumentType and DocumentNumber.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounting_documents_send_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountingDocumentsSendRequest request:
        :param str content_language: Sets the content response language. Defaults to Hebrew (he).
        :return: CoreAPIEmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'content_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounting_documents_send" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'content_language' in params:
            header_params['Content-Language'] = params['content_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/accounting/documents/send/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoreAPIEmptyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
