# coding: utf-8

"""
    OfficeGuy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-06-20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body139(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'include_inherited': 'bool',
        'name_filter': 'str',
        'status': 'Object',
        'sort_by_name': 'bool',
        'application_name': 'str',
        'hide_for_folders_list': 'bool',
        'credentials': 'Object'
    }
    if hasattr(CRMSchemaListFoldersRequest, "swagger_types"):
        swagger_types.update(CRMSchemaListFoldersRequest.swagger_types)

    attribute_map = {
        'include_inherited': 'IncludeInherited',
        'name_filter': 'NameFilter',
        'status': 'Status',
        'sort_by_name': 'SortByName',
        'application_name': 'ApplicationName',
        'hide_for_folders_list': 'HideForFoldersList',
        'credentials': 'Credentials'
    }
    if hasattr(CRMSchemaListFoldersRequest, "attribute_map"):
        attribute_map.update(CRMSchemaListFoldersRequest.attribute_map)

    def __init__(self, include_inherited=None, name_filter=None, status=None, sort_by_name=None, application_name=None, hide_for_folders_list=None, credentials=None, *args, **kwargs):  # noqa: E501
        """Body139 - a model defined in Swagger"""  # noqa: E501
        self._include_inherited = None
        self._name_filter = None
        self._status = None
        self._sort_by_name = None
        self._application_name = None
        self._hide_for_folders_list = None
        self._credentials = None
        self.discriminator = None
        if include_inherited is not None:
            self.include_inherited = include_inherited
        if name_filter is not None:
            self.name_filter = name_filter
        if status is not None:
            self.status = status
        if sort_by_name is not None:
            self.sort_by_name = sort_by_name
        if application_name is not None:
            self.application_name = application_name
        if hide_for_folders_list is not None:
            self.hide_for_folders_list = hide_for_folders_list
        self.credentials = credentials
        CRMSchemaListFoldersRequest.__init__(self, *args, **kwargs)

    @property
    def include_inherited(self):
        """Gets the include_inherited of this Body139.  # noqa: E501


        :return: The include_inherited of this Body139.  # noqa: E501
        :rtype: bool
        """
        return self._include_inherited

    @include_inherited.setter
    def include_inherited(self, include_inherited):
        """Sets the include_inherited of this Body139.


        :param include_inherited: The include_inherited of this Body139.  # noqa: E501
        :type: bool
        """

        self._include_inherited = include_inherited

    @property
    def name_filter(self):
        """Gets the name_filter of this Body139.  # noqa: E501


        :return: The name_filter of this Body139.  # noqa: E501
        :rtype: str
        """
        return self._name_filter

    @name_filter.setter
    def name_filter(self, name_filter):
        """Sets the name_filter of this Body139.


        :param name_filter: The name_filter of this Body139.  # noqa: E501
        :type: str
        """

        self._name_filter = name_filter

    @property
    def status(self):
        """Gets the status of this Body139.  # noqa: E501


        :return: The status of this Body139.  # noqa: E501
        :rtype: Object
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Body139.


        :param status: The status of this Body139.  # noqa: E501
        :type: Object
        """

        self._status = status

    @property
    def sort_by_name(self):
        """Gets the sort_by_name of this Body139.  # noqa: E501


        :return: The sort_by_name of this Body139.  # noqa: E501
        :rtype: bool
        """
        return self._sort_by_name

    @sort_by_name.setter
    def sort_by_name(self, sort_by_name):
        """Sets the sort_by_name of this Body139.


        :param sort_by_name: The sort_by_name of this Body139.  # noqa: E501
        :type: bool
        """

        self._sort_by_name = sort_by_name

    @property
    def application_name(self):
        """Gets the application_name of this Body139.  # noqa: E501


        :return: The application_name of this Body139.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this Body139.


        :param application_name: The application_name of this Body139.  # noqa: E501
        :type: str
        """

        self._application_name = application_name

    @property
    def hide_for_folders_list(self):
        """Gets the hide_for_folders_list of this Body139.  # noqa: E501


        :return: The hide_for_folders_list of this Body139.  # noqa: E501
        :rtype: bool
        """
        return self._hide_for_folders_list

    @hide_for_folders_list.setter
    def hide_for_folders_list(self, hide_for_folders_list):
        """Sets the hide_for_folders_list of this Body139.


        :param hide_for_folders_list: The hide_for_folders_list of this Body139.  # noqa: E501
        :type: bool
        """

        self._hide_for_folders_list = hide_for_folders_list

    @property
    def credentials(self):
        """Gets the credentials of this Body139.  # noqa: E501

        Company API credentials  # noqa: E501

        :return: The credentials of this Body139.  # noqa: E501
        :rtype: Object
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this Body139.

        Company API credentials  # noqa: E501

        :param credentials: The credentials of this Body139.  # noqa: E501
        :type: Object
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501

        self._credentials = credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body139, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body139):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
