# coding: utf-8

"""
    OfficeGuy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccountingTypedDocumentDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_draft': 'bool',
        '_date': 'datetime',
        'customer': 'AccountingTypedCustomer',
        'send_by_email': 'AccountingTypedDocumentSendByEmail',
        'language': 'str',
        'currency': 'str',
        'type': 'str',
        'description': 'str'
    }

    attribute_map = {
        'is_draft': 'IsDraft',
        '_date': 'Date',
        'customer': 'Customer',
        'send_by_email': 'SendByEmail',
        'language': 'Language',
        'currency': 'Currency',
        'type': 'Type',
        'description': 'Description'
    }

    def __init__(self, is_draft=None, _date=None, customer=None, send_by_email=None, language=None, currency=None, type=None, description=None):  # noqa: E501
        """AccountingTypedDocumentDetails - a model defined in Swagger"""  # noqa: E501

        self._is_draft = None
        self.__date = None
        self._customer = None
        self._send_by_email = None
        self._language = None
        self._currency = None
        self._type = None
        self._description = None
        self.discriminator = None

        if is_draft is not None:
            self.is_draft = is_draft
        if _date is not None:
            self._date = _date
        self.customer = customer
        if send_by_email is not None:
            self.send_by_email = send_by_email
        if language is not None:
            self.language = language
        if currency is not None:
            self.currency = currency
        self.type = type
        if description is not None:
            self.description = description

    @property
    def is_draft(self):
        """Gets the is_draft of this AccountingTypedDocumentDetails.  # noqa: E501

        Save document as draft<div><i>Leave empty for final document</i></div>  # noqa: E501

        :return: The is_draft of this AccountingTypedDocumentDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_draft

    @is_draft.setter
    def is_draft(self, is_draft):
        """Sets the is_draft of this AccountingTypedDocumentDetails.

        Save document as draft<div><i>Leave empty for final document</i></div>  # noqa: E501

        :param is_draft: The is_draft of this AccountingTypedDocumentDetails.  # noqa: E501
        :type: bool
        """

        self._is_draft = is_draft

    @property
    def _date(self):
        """Gets the _date of this AccountingTypedDocumentDetails.  # noqa: E501

        Document date<div><i>Defaults to the current date</i></div>  # noqa: E501

        :return: The _date of this AccountingTypedDocumentDetails.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this AccountingTypedDocumentDetails.

        Document date<div><i>Defaults to the current date</i></div>  # noqa: E501

        :param _date: The _date of this AccountingTypedDocumentDetails.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def customer(self):
        """Gets the customer of this AccountingTypedDocumentDetails.  # noqa: E501

        Customer  # noqa: E501

        :return: The customer of this AccountingTypedDocumentDetails.  # noqa: E501
        :rtype: AccountingTypedCustomer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this AccountingTypedDocumentDetails.

        Customer  # noqa: E501

        :param customer: The customer of this AccountingTypedDocumentDetails.  # noqa: E501
        :type: AccountingTypedCustomer
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")  # noqa: E501

        self._customer = customer

    @property
    def send_by_email(self):
        """Gets the send_by_email of this AccountingTypedDocumentDetails.  # noqa: E501

        Send document by email after creation  # noqa: E501

        :return: The send_by_email of this AccountingTypedDocumentDetails.  # noqa: E501
        :rtype: AccountingTypedDocumentSendByEmail
        """
        return self._send_by_email

    @send_by_email.setter
    def send_by_email(self, send_by_email):
        """Sets the send_by_email of this AccountingTypedDocumentDetails.

        Send document by email after creation  # noqa: E501

        :param send_by_email: The send_by_email of this AccountingTypedDocumentDetails.  # noqa: E501
        :type: AccountingTypedDocumentSendByEmail
        """

        self._send_by_email = send_by_email

    @property
    def language(self):
        """Gets the language of this AccountingTypedDocumentDetails.  # noqa: E501

        Document language<div><i>Defaults to the company language</i></div>  # noqa: E501

        :return: The language of this AccountingTypedDocumentDetails.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this AccountingTypedDocumentDetails.

        Document language<div><i>Defaults to the company language</i></div>  # noqa: E501

        :param language: The language of this AccountingTypedDocumentDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["Hebrew", "English", "Arabic", "Spanish"]  # noqa: E501
        # MANUAL FIX
        if language.isnumeric():
            language = allowed_values[int(language)]
        # END MANUAL FIX
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"  # noqa: E501
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def currency(self):
        """Gets the currency of this AccountingTypedDocumentDetails.  # noqa: E501

        Document currency<div><i>Defaults to the company currency</i></div>  # noqa: E501

        :return: The currency of this AccountingTypedDocumentDetails.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AccountingTypedDocumentDetails.

        Document currency<div><i>Defaults to the company currency</i></div>  # noqa: E501

        :param currency: The currency of this AccountingTypedDocumentDetails.  # noqa: E501
        :type: str
        """
        # allowed_values = ["ILS", "USD", "EUR", "CAD", "CHF", "GBP", "AUD"]  # noqa: E501
        allowed_values = ["ILS", "USD", "EUR", "CAD", "CHF", "GBP", "AUD", "PLN"]  # noqa: E501
        # END MANUAL FIX
        # MANUAL FIX
        if currency.isnumeric():
            currency = allowed_values[int(currency)]
        # END MANUAL FIX
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"  # noqa: E501
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def type(self):
        """Gets the type of this AccountingTypedDocumentDetails.  # noqa: E501

        Document type  # noqa: E501

        :return: The type of this AccountingTypedDocumentDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccountingTypedDocumentDetails.

        Document type  # noqa: E501

        :param type: The type of this AccountingTypedDocumentDetails.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Invoice", "InvoiceAndReceipt", "Receipt", "ProformaInvoice", "DonationReceipt", "CreditInvoice", "CreditInvoiceAndReceipt", "CreditReceipt", "Order", "DeliveryNote", "GoodsReturnNote", "PurchasingOrder", "PriceQuotation", "PaymentRequest", "CreditDonationReceipt"]  # noqa: E501
        # MANUAL FIX
        if type.isnumeric():
            type = allowed_values[int(type)]
        # END MANUAL FIX
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def description(self):
        """Gets the description of this AccountingTypedDocumentDetails.  # noqa: E501

        Document description. The description is shown in the printed document.  # noqa: E501

        :return: The description of this AccountingTypedDocumentDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccountingTypedDocumentDetails.

        Document description. The description is shown in the printed document.  # noqa: E501

        :param description: The description of this AccountingTypedDocumentDetails.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountingTypedDocumentDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountingTypedDocumentDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
