# coding: utf-8

"""
    OfficeGuy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-06-20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AccountingDocumentsAddExpenseRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expense_number': 'str',
        'expense_file': 'str',
        'supplier': 'AllOfAccountingDocumentsAddExpenseRequestSupplier',
        '_date': 'datetime',
        'lines': 'list[AccountingTypedDocumentExpenseItem]',
        'payments': 'list[AccountingTypedDocumentPayment]',
        'description': 'str',
        'is_draft': 'bool',
        'vat_rate': 'float',
        'credentials': 'AllOfAccountingDocumentsAddExpenseRequestCredentials'
    }

    attribute_map = {
        'expense_number': 'ExpenseNumber',
        'expense_file': 'ExpenseFile',
        'supplier': 'Supplier',
        '_date': 'Date',
        'lines': 'Lines',
        'payments': 'Payments',
        'description': 'Description',
        'is_draft': 'IsDraft',
        'vat_rate': 'VATRate',
        'credentials': 'Credentials'
    }

    def __init__(self, expense_number=None, expense_file=None, supplier=None, _date=None, lines=None, payments=None, description=None, is_draft=None, vat_rate=None, credentials=None):  # noqa: E501
        """AccountingDocumentsAddExpenseRequest - a model defined in Swagger"""  # noqa: E501
        self._expense_number = None
        self._expense_file = None
        self._supplier = None
        self.__date = None
        self._lines = None
        self._payments = None
        self._description = None
        self._is_draft = None
        self._vat_rate = None
        self._credentials = None
        self.discriminator = None
        if expense_number is not None:
            self.expense_number = expense_number
        if expense_file is not None:
            self.expense_file = expense_file
        if supplier is not None:
            self.supplier = supplier
        if _date is not None:
            self._date = _date
        if lines is not None:
            self.lines = lines
        if payments is not None:
            self.payments = payments
        if description is not None:
            self.description = description
        if is_draft is not None:
            self.is_draft = is_draft
        if vat_rate is not None:
            self.vat_rate = vat_rate
        self.credentials = credentials

    @property
    def expense_number(self):
        """Gets the expense_number of this AccountingDocumentsAddExpenseRequest.  # noqa: E501

        Expense invoice number  # noqa: E501

        :return: The expense_number of this AccountingDocumentsAddExpenseRequest.  # noqa: E501
        :rtype: str
        """
        return self._expense_number

    @expense_number.setter
    def expense_number(self, expense_number):
        """Sets the expense_number of this AccountingDocumentsAddExpenseRequest.

        Expense invoice number  # noqa: E501

        :param expense_number: The expense_number of this AccountingDocumentsAddExpenseRequest.  # noqa: E501
        :type: str
        """

        self._expense_number = expense_number

    @property
    def expense_file(self):
        """Gets the expense_file of this AccountingDocumentsAddExpenseRequest.  # noqa: E501

        Expense file contents  # noqa: E501

        :return: The expense_file of this AccountingDocumentsAddExpenseRequest.  # noqa: E501
        :rtype: str
        """
        return self._expense_file

    @expense_file.setter
    def expense_file(self, expense_file):
        """Sets the expense_file of this AccountingDocumentsAddExpenseRequest.

        Expense file contents  # noqa: E501

        :param expense_file: The expense_file of this AccountingDocumentsAddExpenseRequest.  # noqa: E501
        :type: str
        """

        self._expense_file = expense_file

    @property
    def supplier(self):
        """Gets the supplier of this AccountingDocumentsAddExpenseRequest.  # noqa: E501

        Expense supplier  # noqa: E501

        :return: The supplier of this AccountingDocumentsAddExpenseRequest.  # noqa: E501
        :rtype: AllOfAccountingDocumentsAddExpenseRequestSupplier
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """Sets the supplier of this AccountingDocumentsAddExpenseRequest.

        Expense supplier  # noqa: E501

        :param supplier: The supplier of this AccountingDocumentsAddExpenseRequest.  # noqa: E501
        :type: AllOfAccountingDocumentsAddExpenseRequestSupplier
        """

        self._supplier = supplier

    @property
    def _date(self):
        """Gets the _date of this AccountingDocumentsAddExpenseRequest.  # noqa: E501

        Expense date  # noqa: E501

        :return: The _date of this AccountingDocumentsAddExpenseRequest.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this AccountingDocumentsAddExpenseRequest.

        Expense date  # noqa: E501

        :param _date: The _date of this AccountingDocumentsAddExpenseRequest.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def lines(self):
        """Gets the lines of this AccountingDocumentsAddExpenseRequest.  # noqa: E501

        Expense items and amounts  # noqa: E501

        :return: The lines of this AccountingDocumentsAddExpenseRequest.  # noqa: E501
        :rtype: list[AccountingTypedDocumentExpenseItem]
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this AccountingDocumentsAddExpenseRequest.

        Expense items and amounts  # noqa: E501

        :param lines: The lines of this AccountingDocumentsAddExpenseRequest.  # noqa: E501
        :type: list[AccountingTypedDocumentExpenseItem]
        """

        self._lines = lines

    @property
    def payments(self):
        """Gets the payments of this AccountingDocumentsAddExpenseRequest.  # noqa: E501

        Document payments<div><i>Please note each payment should contain a single details object (Cash/BankTransfer/Cheque/CreditCard/Other), multiple payments are handled through the payments array.</i></div>  # noqa: E501

        :return: The payments of this AccountingDocumentsAddExpenseRequest.  # noqa: E501
        :rtype: list[AccountingTypedDocumentPayment]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this AccountingDocumentsAddExpenseRequest.

        Document payments<div><i>Please note each payment should contain a single details object (Cash/BankTransfer/Cheque/CreditCard/Other), multiple payments are handled through the payments array.</i></div>  # noqa: E501

        :param payments: The payments of this AccountingDocumentsAddExpenseRequest.  # noqa: E501
        :type: list[AccountingTypedDocumentPayment]
        """

        self._payments = payments

    @property
    def description(self):
        """Gets the description of this AccountingDocumentsAddExpenseRequest.  # noqa: E501

        Expense description/remarks  # noqa: E501

        :return: The description of this AccountingDocumentsAddExpenseRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccountingDocumentsAddExpenseRequest.

        Expense description/remarks  # noqa: E501

        :param description: The description of this AccountingDocumentsAddExpenseRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_draft(self):
        """Gets the is_draft of this AccountingDocumentsAddExpenseRequest.  # noqa: E501

        Save document as draft  # noqa: E501

        :return: The is_draft of this AccountingDocumentsAddExpenseRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_draft

    @is_draft.setter
    def is_draft(self, is_draft):
        """Sets the is_draft of this AccountingDocumentsAddExpenseRequest.

        Save document as draft  # noqa: E501

        :param is_draft: The is_draft of this AccountingDocumentsAddExpenseRequest.  # noqa: E501
        :type: bool
        """

        self._is_draft = is_draft

    @property
    def vat_rate(self):
        """Gets the vat_rate of this AccountingDocumentsAddExpenseRequest.  # noqa: E501

        Document VAT Rate<div><i>Leave empty for company default</i></div>  # noqa: E501

        :return: The vat_rate of this AccountingDocumentsAddExpenseRequest.  # noqa: E501
        :rtype: float
        """
        return self._vat_rate

    @vat_rate.setter
    def vat_rate(self, vat_rate):
        """Sets the vat_rate of this AccountingDocumentsAddExpenseRequest.

        Document VAT Rate<div><i>Leave empty for company default</i></div>  # noqa: E501

        :param vat_rate: The vat_rate of this AccountingDocumentsAddExpenseRequest.  # noqa: E501
        :type: float
        """

        self._vat_rate = vat_rate

    @property
    def credentials(self):
        """Gets the credentials of this AccountingDocumentsAddExpenseRequest.  # noqa: E501

        Company API credentials  # noqa: E501

        :return: The credentials of this AccountingDocumentsAddExpenseRequest.  # noqa: E501
        :rtype: AllOfAccountingDocumentsAddExpenseRequestCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this AccountingDocumentsAddExpenseRequest.

        Company API credentials  # noqa: E501

        :param credentials: The credentials of this AccountingDocumentsAddExpenseRequest.  # noqa: E501
        :type: AllOfAccountingDocumentsAddExpenseRequestCredentials
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501

        self._credentials = credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountingDocumentsAddExpenseRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountingDocumentsAddExpenseRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
