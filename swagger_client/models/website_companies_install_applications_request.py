# coding: utf-8

"""
    OfficeGuy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WebsiteCompaniesInstallApplicationsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'applications': 'list[str]',
        'credentials': 'CoreAPICredentials'
    }

    attribute_map = {
        'applications': 'Applications',
        'credentials': 'Credentials'
    }

    def __init__(self, applications=None, credentials=None):  # noqa: E501
        """WebsiteCompaniesInstallApplicationsRequest - a model defined in Swagger"""  # noqa: E501

        self._applications = None
        self._credentials = None
        self.discriminator = None

        self.applications = applications
        self.credentials = credentials

    @property
    def applications(self):
        """Gets the applications of this WebsiteCompaniesInstallApplicationsRequest.  # noqa: E501

        List of applications to be installed.<div><i>Please note this may incur additional charges.</i></div>  # noqa: E501

        :return: The applications of this WebsiteCompaniesInstallApplicationsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this WebsiteCompaniesInstallApplicationsRequest.

        List of applications to be installed.<div><i>Please note this may incur additional charges.</i></div>  # noqa: E501

        :param applications: The applications of this WebsiteCompaniesInstallApplicationsRequest.  # noqa: E501
        :type: list[str]
        """
        if applications is None:
            raise ValueError("Invalid value for `applications`, must not be `None`")  # noqa: E501
        allowed_values = ["CreditCard", "DirectDebit", "RecurringBilling", "PurchasePages", "CRM", "EmailSubscriptions", "SMS", "Accounting", "Expenses", "Cheques", "PayPal", "TaskManagement", "TimeClock", "TimeRecorder", "BusinessCard", "LandingPages", "Calendar", "Fax", "AccountingHashExport"]  # noqa: E501
        if not set(applications).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `applications` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(applications) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._applications = applications

    @property
    def credentials(self):
        """Gets the credentials of this WebsiteCompaniesInstallApplicationsRequest.  # noqa: E501

        Company API credentials  # noqa: E501

        :return: The credentials of this WebsiteCompaniesInstallApplicationsRequest.  # noqa: E501
        :rtype: CoreAPICredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this WebsiteCompaniesInstallApplicationsRequest.

        Company API credentials  # noqa: E501

        :param credentials: The credentials of this WebsiteCompaniesInstallApplicationsRequest.  # noqa: E501
        :type: CoreAPICredentials
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501

        self._credentials = credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebsiteCompaniesInstallApplicationsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebsiteCompaniesInstallApplicationsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
