# coding: utf-8

"""
    OfficeGuy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-06-20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AccountingTypedDocumentItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'quantity': 'float',
        'unit_price': 'float',
        'total_price': 'float',
        'document_currency_unit_price': 'float',
        'document_currency_total_price': 'float',
        'item': 'AllOfAccountingTypedDocumentItemItem',
        'description': 'str'
    }

    attribute_map = {
        'quantity': 'Quantity',
        'unit_price': 'UnitPrice',
        'total_price': 'TotalPrice',
        'document_currency_unit_price': 'DocumentCurrency_UnitPrice',
        'document_currency_total_price': 'DocumentCurrency_TotalPrice',
        'item': 'Item',
        'description': 'Description'
    }

    def __init__(self, quantity=None, unit_price=None, total_price=None, document_currency_unit_price=None, document_currency_total_price=None, item=None, description=None):  # noqa: E501
        """AccountingTypedDocumentItem - a model defined in Swagger"""  # noqa: E501
        self._quantity = None
        self._unit_price = None
        self._total_price = None
        self._document_currency_unit_price = None
        self._document_currency_total_price = None
        self._item = None
        self._description = None
        self.discriminator = None
        if quantity is not None:
            self.quantity = quantity
        if unit_price is not None:
            self.unit_price = unit_price
        if total_price is not None:
            self.total_price = total_price
        if document_currency_unit_price is not None:
            self.document_currency_unit_price = document_currency_unit_price
        if document_currency_total_price is not None:
            self.document_currency_total_price = document_currency_total_price
        if item is not None:
            self.item = item
        if description is not None:
            self.description = description

    @property
    def quantity(self):
        """Gets the quantity of this AccountingTypedDocumentItem.  # noqa: E501

        Quantity<div><i>Defaults to 1</i></div>  # noqa: E501

        :return: The quantity of this AccountingTypedDocumentItem.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this AccountingTypedDocumentItem.

        Quantity<div><i>Defaults to 1</i></div>  # noqa: E501

        :param quantity: The quantity of this AccountingTypedDocumentItem.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def unit_price(self):
        """Gets the unit_price of this AccountingTypedDocumentItem.  # noqa: E501

        Unit price in ILS<div><i>Single unit price.  Leave this empty for non-ILS documents and automatic exchange rate.</i></div>  # noqa: E501

        :return: The unit_price of this AccountingTypedDocumentItem.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this AccountingTypedDocumentItem.

        Unit price in ILS<div><i>Single unit price.  Leave this empty for non-ILS documents and automatic exchange rate.</i></div>  # noqa: E501

        :param unit_price: The unit_price of this AccountingTypedDocumentItem.  # noqa: E501
        :type: float
        """

        self._unit_price = unit_price

    @property
    def total_price(self):
        """Gets the total_price of this AccountingTypedDocumentItem.  # noqa: E501

        Total price in ILS<div><i>Leave this empty to auto calculate on ILS documents: Total price - Unit price * Quantity.  Leave this empty for non-ILS documents and automatic exchange rate.</i></div>  # noqa: E501

        :return: The total_price of this AccountingTypedDocumentItem.  # noqa: E501
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this AccountingTypedDocumentItem.

        Total price in ILS<div><i>Leave this empty to auto calculate on ILS documents: Total price - Unit price * Quantity.  Leave this empty for non-ILS documents and automatic exchange rate.</i></div>  # noqa: E501

        :param total_price: The total_price of this AccountingTypedDocumentItem.  # noqa: E501
        :type: float
        """

        self._total_price = total_price

    @property
    def document_currency_unit_price(self):
        """Gets the document_currency_unit_price of this AccountingTypedDocumentItem.  # noqa: E501

        Unit price in document currency<div><i>Single unit price in the document currency.  Leave this empty for ILS documents / automatic exchange rate.</i></div>  # noqa: E501

        :return: The document_currency_unit_price of this AccountingTypedDocumentItem.  # noqa: E501
        :rtype: float
        """
        return self._document_currency_unit_price

    @document_currency_unit_price.setter
    def document_currency_unit_price(self, document_currency_unit_price):
        """Sets the document_currency_unit_price of this AccountingTypedDocumentItem.

        Unit price in document currency<div><i>Single unit price in the document currency.  Leave this empty for ILS documents / automatic exchange rate.</i></div>  # noqa: E501

        :param document_currency_unit_price: The document_currency_unit_price of this AccountingTypedDocumentItem.  # noqa: E501
        :type: float
        """

        self._document_currency_unit_price = document_currency_unit_price

    @property
    def document_currency_total_price(self):
        """Gets the document_currency_total_price of this AccountingTypedDocumentItem.  # noqa: E501

        Total price in document currency<div><i>Leave this empty to auto calculate: Total price - Unit price * Quantity.  Leave this empty for ILS documents / automatic exchange rate.</i></div>  # noqa: E501

        :return: The document_currency_total_price of this AccountingTypedDocumentItem.  # noqa: E501
        :rtype: float
        """
        return self._document_currency_total_price

    @document_currency_total_price.setter
    def document_currency_total_price(self, document_currency_total_price):
        """Sets the document_currency_total_price of this AccountingTypedDocumentItem.

        Total price in document currency<div><i>Leave this empty to auto calculate: Total price - Unit price * Quantity.  Leave this empty for ILS documents / automatic exchange rate.</i></div>  # noqa: E501

        :param document_currency_total_price: The document_currency_total_price of this AccountingTypedDocumentItem.  # noqa: E501
        :type: float
        """

        self._document_currency_total_price = document_currency_total_price

    @property
    def item(self):
        """Gets the item of this AccountingTypedDocumentItem.  # noqa: E501

        Item details  # noqa: E501

        :return: The item of this AccountingTypedDocumentItem.  # noqa: E501
        :rtype: AllOfAccountingTypedDocumentItemItem
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this AccountingTypedDocumentItem.

        Item details  # noqa: E501

        :param item: The item of this AccountingTypedDocumentItem.  # noqa: E501
        :type: AllOfAccountingTypedDocumentItemItem
        """

        self._item = item

    @property
    def description(self):
        """Gets the description of this AccountingTypedDocumentItem.  # noqa: E501

        Document description. The description is shown in the printed document.  # noqa: E501

        :return: The description of this AccountingTypedDocumentItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccountingTypedDocumentItem.

        Document description. The description is shown in the printed document.  # noqa: E501

        :param description: The description of this AccountingTypedDocumentItem.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountingTypedDocumentItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountingTypedDocumentItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
