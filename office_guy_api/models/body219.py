# coding: utf-8

"""
    OfficeGuy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-06-20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body219(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer': 'Object',
        'payment_method': 'Object',
        'single_use_token': 'str',
        'items': 'list[BillingTypedChargeRecurringItem]',
        'update_customer_by_email': 'bool',
        'update_customer_by_email_attach_document': 'bool',
        'authorise_only': 'bool',
        'document_type': 'Object',
        'send_copy_to_organization': 'bool',
        'vat_included': 'bool',
        'attribution_offset': 'int',
        'credit_card_payments_count': 'int',
        'merchant_number': 'str',
        'credentials': 'Object'
    }
    if hasattr(BillingRecurringChargeRequest, "swagger_types"):
        swagger_types.update(BillingRecurringChargeRequest.swagger_types)

    attribute_map = {
        'customer': 'Customer',
        'payment_method': 'PaymentMethod',
        'single_use_token': 'SingleUseToken',
        'items': 'Items',
        'update_customer_by_email': 'UpdateCustomerByEmail',
        'update_customer_by_email_attach_document': 'UpdateCustomerByEmail_AttachDocument',
        'authorise_only': 'AuthoriseOnly',
        'document_type': 'DocumentType',
        'send_copy_to_organization': 'SendCopyToOrganization',
        'vat_included': 'VATIncluded',
        'attribution_offset': 'AttributionOffset',
        'credit_card_payments_count': 'CreditCardPayments_Count',
        'merchant_number': 'MerchantNumber',
        'credentials': 'Credentials'
    }
    if hasattr(BillingRecurringChargeRequest, "attribute_map"):
        attribute_map.update(BillingRecurringChargeRequest.attribute_map)

    def __init__(self, customer=None, payment_method=None, single_use_token=None, items=None, update_customer_by_email=None, update_customer_by_email_attach_document=None, authorise_only=None, document_type=None, send_copy_to_organization=None, vat_included=None, attribution_offset=None, credit_card_payments_count=None, merchant_number=None, credentials=None, *args, **kwargs):  # noqa: E501
        """Body219 - a model defined in Swagger"""  # noqa: E501
        self._customer = None
        self._payment_method = None
        self._single_use_token = None
        self._items = None
        self._update_customer_by_email = None
        self._update_customer_by_email_attach_document = None
        self._authorise_only = None
        self._document_type = None
        self._send_copy_to_organization = None
        self._vat_included = None
        self._attribution_offset = None
        self._credit_card_payments_count = None
        self._merchant_number = None
        self._credentials = None
        self.discriminator = None
        self.customer = customer
        if payment_method is not None:
            self.payment_method = payment_method
        if single_use_token is not None:
            self.single_use_token = single_use_token
        self.items = items
        if update_customer_by_email is not None:
            self.update_customer_by_email = update_customer_by_email
        if update_customer_by_email_attach_document is not None:
            self.update_customer_by_email_attach_document = update_customer_by_email_attach_document
        if authorise_only is not None:
            self.authorise_only = authorise_only
        if document_type is not None:
            self.document_type = document_type
        if send_copy_to_organization is not None:
            self.send_copy_to_organization = send_copy_to_organization
        if vat_included is not None:
            self.vat_included = vat_included
        if attribution_offset is not None:
            self.attribution_offset = attribution_offset
        if credit_card_payments_count is not None:
            self.credit_card_payments_count = credit_card_payments_count
        if merchant_number is not None:
            self.merchant_number = merchant_number
        self.credentials = credentials
        BillingRecurringChargeRequest.__init__(self, *args, **kwargs)

    @property
    def customer(self):
        """Gets the customer of this Body219.  # noqa: E501

        Customer  # noqa: E501

        :return: The customer of this Body219.  # noqa: E501
        :rtype: Object
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Body219.

        Customer  # noqa: E501

        :param customer: The customer of this Body219.  # noqa: E501
        :type: Object
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")  # noqa: E501

        self._customer = customer

    @property
    def payment_method(self):
        """Gets the payment_method of this Body219.  # noqa: E501

        Payment method details<div><i>Leave this empty to use the customer payment method, or when using the SingleUseToken</i></div>  # noqa: E501

        :return: The payment_method of this Body219.  # noqa: E501
        :rtype: Object
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this Body219.

        Payment method details<div><i>Leave this empty to use the customer payment method, or when using the SingleUseToken</i></div>  # noqa: E501

        :param payment_method: The payment_method of this Body219.  # noqa: E501
        :type: Object
        """

        self._payment_method = payment_method

    @property
    def single_use_token(self):
        """Gets the single_use_token of this Body219.  # noqa: E501

        Single use token, for all payment details (CardNumber, Expiration, CVV, CitizenID).<div><i>Used primarily by the Payments JavaScript API.</i></div>  # noqa: E501

        :return: The single_use_token of this Body219.  # noqa: E501
        :rtype: str
        """
        return self._single_use_token

    @single_use_token.setter
    def single_use_token(self, single_use_token):
        """Sets the single_use_token of this Body219.

        Single use token, for all payment details (CardNumber, Expiration, CVV, CitizenID).<div><i>Used primarily by the Payments JavaScript API.</i></div>  # noqa: E501

        :param single_use_token: The single_use_token of this Body219.  # noqa: E501
        :type: str
        """

        self._single_use_token = single_use_token

    @property
    def items(self):
        """Gets the items of this Body219.  # noqa: E501

        Items  # noqa: E501

        :return: The items of this Body219.  # noqa: E501
        :rtype: list[BillingTypedChargeRecurringItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Body219.

        Items  # noqa: E501

        :param items: The items of this Body219.  # noqa: E501
        :type: list[BillingTypedChargeRecurringItem]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items

    @property
    def update_customer_by_email(self):
        """Gets the update_customer_by_email of this Body219.  # noqa: E501

        Update customer by email<div><i>Defaults to False</i></div>  # noqa: E501

        :return: The update_customer_by_email of this Body219.  # noqa: E501
        :rtype: bool
        """
        return self._update_customer_by_email

    @update_customer_by_email.setter
    def update_customer_by_email(self, update_customer_by_email):
        """Sets the update_customer_by_email of this Body219.

        Update customer by email<div><i>Defaults to False</i></div>  # noqa: E501

        :param update_customer_by_email: The update_customer_by_email of this Body219.  # noqa: E501
        :type: bool
        """

        self._update_customer_by_email = update_customer_by_email

    @property
    def update_customer_by_email_attach_document(self):
        """Gets the update_customer_by_email_attach_document of this Body219.  # noqa: E501

        Attach invoice/receipt to email<div><i>Defaults to False</i></div>  # noqa: E501

        :return: The update_customer_by_email_attach_document of this Body219.  # noqa: E501
        :rtype: bool
        """
        return self._update_customer_by_email_attach_document

    @update_customer_by_email_attach_document.setter
    def update_customer_by_email_attach_document(self, update_customer_by_email_attach_document):
        """Sets the update_customer_by_email_attach_document of this Body219.

        Attach invoice/receipt to email<div><i>Defaults to False</i></div>  # noqa: E501

        :param update_customer_by_email_attach_document: The update_customer_by_email_attach_document of this Body219.  # noqa: E501
        :type: bool
        """

        self._update_customer_by_email_attach_document = update_customer_by_email_attach_document

    @property
    def authorise_only(self):
        """Gets the authorise_only of this Body219.  # noqa: E501

        Should the transaction be committed, or authorized only.<div><i>Leave empty for \"False\" (Auto-Commit).  This field could be used for testing the Charge action easily.  Please note, when using AuthoriseOnly, documents will be created as \"Draft\", and recurring items will be created as cancelled.</i></div>  # noqa: E501

        :return: The authorise_only of this Body219.  # noqa: E501
        :rtype: bool
        """
        return self._authorise_only

    @authorise_only.setter
    def authorise_only(self, authorise_only):
        """Sets the authorise_only of this Body219.

        Should the transaction be committed, or authorized only.<div><i>Leave empty for \"False\" (Auto-Commit).  This field could be used for testing the Charge action easily.  Please note, when using AuthoriseOnly, documents will be created as \"Draft\", and recurring items will be created as cancelled.</i></div>  # noqa: E501

        :param authorise_only: The authorise_only of this Body219.  # noqa: E501
        :type: bool
        """

        self._authorise_only = authorise_only

    @property
    def document_type(self):
        """Gets the document_type of this Body219.  # noqa: E501

        Created document type<div><i>Leave empty for default</i></div>  # noqa: E501

        :return: The document_type of this Body219.  # noqa: E501
        :rtype: Object
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this Body219.

        Created document type<div><i>Leave empty for default</i></div>  # noqa: E501

        :param document_type: The document_type of this Body219.  # noqa: E501
        :type: Object
        """

        self._document_type = document_type

    @property
    def send_copy_to_organization(self):
        """Gets the send_copy_to_organization of this Body219.  # noqa: E501

        Send email to the organization as well.  Defaults to the accounting application settings.<div><i>Relevant when using UpdateCustomerByEmail.</i></div>  # noqa: E501

        :return: The send_copy_to_organization of this Body219.  # noqa: E501
        :rtype: bool
        """
        return self._send_copy_to_organization

    @send_copy_to_organization.setter
    def send_copy_to_organization(self, send_copy_to_organization):
        """Sets the send_copy_to_organization of this Body219.

        Send email to the organization as well.  Defaults to the accounting application settings.<div><i>Relevant when using UpdateCustomerByEmail.</i></div>  # noqa: E501

        :param send_copy_to_organization: The send_copy_to_organization of this Body219.  # noqa: E501
        :type: bool
        """

        self._send_copy_to_organization = send_copy_to_organization

    @property
    def vat_included(self):
        """Gets the vat_included of this Body219.  # noqa: E501

        Is VAT included in the prices?<div><i>Leave empty for false.  Relevant for items only.</i></div>  # noqa: E501

        :return: The vat_included of this Body219.  # noqa: E501
        :rtype: bool
        """
        return self._vat_included

    @vat_included.setter
    def vat_included(self, vat_included):
        """Sets the vat_included of this Body219.

        Is VAT included in the prices?<div><i>Leave empty for false.  Relevant for items only.</i></div>  # noqa: E501

        :param vat_included: The vat_included of this Body219.  # noqa: E501
        :type: bool
        """

        self._vat_included = vat_included

    @property
    def attribution_offset(self):
        """Gets the attribution_offset of this Body219.  # noqa: E501

        Attribution offset in months  # noqa: E501

        :return: The attribution_offset of this Body219.  # noqa: E501
        :rtype: int
        """
        return self._attribution_offset

    @attribution_offset.setter
    def attribution_offset(self, attribution_offset):
        """Sets the attribution_offset of this Body219.

        Attribution offset in months  # noqa: E501

        :param attribution_offset: The attribution_offset of this Body219.  # noqa: E501
        :type: int
        """

        self._attribution_offset = attribution_offset

    @property
    def credit_card_payments_count(self):
        """Gets the credit_card_payments_count of this Body219.  # noqa: E501

        Credit card payments count.  Please note this is not the recurrence (how many months the transaction should last), this parameter shouldn't be used on most use cases.<div><i>Leave this empty to disable payments and use standard direct debit.</i></div>  # noqa: E501

        :return: The credit_card_payments_count of this Body219.  # noqa: E501
        :rtype: int
        """
        return self._credit_card_payments_count

    @credit_card_payments_count.setter
    def credit_card_payments_count(self, credit_card_payments_count):
        """Sets the credit_card_payments_count of this Body219.

        Credit card payments count.  Please note this is not the recurrence (how many months the transaction should last), this parameter shouldn't be used on most use cases.<div><i>Leave this empty to disable payments and use standard direct debit.</i></div>  # noqa: E501

        :param credit_card_payments_count: The credit_card_payments_count of this Body219.  # noqa: E501
        :type: int
        """

        self._credit_card_payments_count = credit_card_payments_count

    @property
    def merchant_number(self):
        """Gets the merchant_number of this Body219.  # noqa: E501

        Shva merchant number (Terminal number).<div><i>This parameter should only be used when multiple merchants are defined in the company.</i></div>  # noqa: E501

        :return: The merchant_number of this Body219.  # noqa: E501
        :rtype: str
        """
        return self._merchant_number

    @merchant_number.setter
    def merchant_number(self, merchant_number):
        """Sets the merchant_number of this Body219.

        Shva merchant number (Terminal number).<div><i>This parameter should only be used when multiple merchants are defined in the company.</i></div>  # noqa: E501

        :param merchant_number: The merchant_number of this Body219.  # noqa: E501
        :type: str
        """

        self._merchant_number = merchant_number

    @property
    def credentials(self):
        """Gets the credentials of this Body219.  # noqa: E501

        Company API credentials  # noqa: E501

        :return: The credentials of this Body219.  # noqa: E501
        :rtype: Object
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this Body219.

        Company API credentials  # noqa: E501

        :param credentials: The credentials of this Body219.  # noqa: E501
        :type: Object
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501

        self._credentials = credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body219, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body219):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
