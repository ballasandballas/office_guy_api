# coding: utf-8

"""
    OfficeGuy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-06-20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body224(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer': 'Object',
        'recurring_customer_item_id': 'int',
        'unit_price': 'float',
        'quantity': 'float',
        'recurrence': 'int',
        'next_payment_date': 'datetime',
        'last_payment_date': 'datetime',
        'credentials': 'Object'
    }
    if hasattr(BillingRecurringUpdateRequest, "swagger_types"):
        swagger_types.update(BillingRecurringUpdateRequest.swagger_types)

    attribute_map = {
        'customer': 'Customer',
        'recurring_customer_item_id': 'RecurringCustomerItemID',
        'unit_price': 'UnitPrice',
        'quantity': 'Quantity',
        'recurrence': 'Recurrence',
        'next_payment_date': 'NextPaymentDate',
        'last_payment_date': 'LastPaymentDate',
        'credentials': 'Credentials'
    }
    if hasattr(BillingRecurringUpdateRequest, "attribute_map"):
        attribute_map.update(BillingRecurringUpdateRequest.attribute_map)

    def __init__(self, customer=None, recurring_customer_item_id=None, unit_price=None, quantity=None, recurrence=None, next_payment_date=None, last_payment_date=None, credentials=None, *args, **kwargs):  # noqa: E501
        """Body224 - a model defined in Swagger"""  # noqa: E501
        self._customer = None
        self._recurring_customer_item_id = None
        self._unit_price = None
        self._quantity = None
        self._recurrence = None
        self._next_payment_date = None
        self._last_payment_date = None
        self._credentials = None
        self.discriminator = None
        self.customer = customer
        self.recurring_customer_item_id = recurring_customer_item_id
        if unit_price is not None:
            self.unit_price = unit_price
        if quantity is not None:
            self.quantity = quantity
        if recurrence is not None:
            self.recurrence = recurrence
        if next_payment_date is not None:
            self.next_payment_date = next_payment_date
        if last_payment_date is not None:
            self.last_payment_date = last_payment_date
        self.credentials = credentials
        BillingRecurringUpdateRequest.__init__(self, *args, **kwargs)

    @property
    def customer(self):
        """Gets the customer of this Body224.  # noqa: E501

        Customer  # noqa: E501

        :return: The customer of this Body224.  # noqa: E501
        :rtype: Object
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Body224.

        Customer  # noqa: E501

        :param customer: The customer of this Body224.  # noqa: E501
        :type: Object
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")  # noqa: E501

        self._customer = customer

    @property
    def recurring_customer_item_id(self):
        """Gets the recurring_customer_item_id of this Body224.  # noqa: E501

        Recurring customer item identifier  # noqa: E501

        :return: The recurring_customer_item_id of this Body224.  # noqa: E501
        :rtype: int
        """
        return self._recurring_customer_item_id

    @recurring_customer_item_id.setter
    def recurring_customer_item_id(self, recurring_customer_item_id):
        """Sets the recurring_customer_item_id of this Body224.

        Recurring customer item identifier  # noqa: E501

        :param recurring_customer_item_id: The recurring_customer_item_id of this Body224.  # noqa: E501
        :type: int
        """
        if recurring_customer_item_id is None:
            raise ValueError("Invalid value for `recurring_customer_item_id`, must not be `None`")  # noqa: E501

        self._recurring_customer_item_id = recurring_customer_item_id

    @property
    def unit_price(self):
        """Gets the unit_price of this Body224.  # noqa: E501

        Unit price  # noqa: E501

        :return: The unit_price of this Body224.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this Body224.

        Unit price  # noqa: E501

        :param unit_price: The unit_price of this Body224.  # noqa: E501
        :type: float
        """

        self._unit_price = unit_price

    @property
    def quantity(self):
        """Gets the quantity of this Body224.  # noqa: E501

        Quantity<div><i>Defaults to 1</i></div>  # noqa: E501

        :return: The quantity of this Body224.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Body224.

        Quantity<div><i>Defaults to 1</i></div>  # noqa: E501

        :param quantity: The quantity of this Body224.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def recurrence(self):
        """Gets the recurrence of this Body224.  # noqa: E501

        Number of pending recurring payments<div><i>For instance, for a total of 1 year of monthly payments, specify 12  Setting this to 0 will result in continuous payments.  Please note this parameter cannot be used when the LastPaymentDate parameter is set.</i></div>  # noqa: E501

        :return: The recurrence of this Body224.  # noqa: E501
        :rtype: int
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this Body224.

        Number of pending recurring payments<div><i>For instance, for a total of 1 year of monthly payments, specify 12  Setting this to 0 will result in continuous payments.  Please note this parameter cannot be used when the LastPaymentDate parameter is set.</i></div>  # noqa: E501

        :param recurrence: The recurrence of this Body224.  # noqa: E501
        :type: int
        """

        self._recurrence = recurrence

    @property
    def next_payment_date(self):
        """Gets the next_payment_date of this Body224.  # noqa: E501

        Next payment date  # noqa: E501

        :return: The next_payment_date of this Body224.  # noqa: E501
        :rtype: datetime
        """
        return self._next_payment_date

    @next_payment_date.setter
    def next_payment_date(self, next_payment_date):
        """Sets the next_payment_date of this Body224.

        Next payment date  # noqa: E501

        :param next_payment_date: The next_payment_date of this Body224.  # noqa: E501
        :type: datetime
        """

        self._next_payment_date = next_payment_date

    @property
    def last_payment_date(self):
        """Gets the last_payment_date of this Body224.  # noqa: E501

        Last payment date.<div><i>Please note this parameter cannot be used when the Recurrence parameter is set.</i></div>  # noqa: E501

        :return: The last_payment_date of this Body224.  # noqa: E501
        :rtype: datetime
        """
        return self._last_payment_date

    @last_payment_date.setter
    def last_payment_date(self, last_payment_date):
        """Sets the last_payment_date of this Body224.

        Last payment date.<div><i>Please note this parameter cannot be used when the Recurrence parameter is set.</i></div>  # noqa: E501

        :param last_payment_date: The last_payment_date of this Body224.  # noqa: E501
        :type: datetime
        """

        self._last_payment_date = last_payment_date

    @property
    def credentials(self):
        """Gets the credentials of this Body224.  # noqa: E501

        Company API credentials  # noqa: E501

        :return: The credentials of this Body224.  # noqa: E501
        :rtype: Object
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this Body224.

        Company API credentials  # noqa: E501

        :param credentials: The credentials of this Body224.  # noqa: E501
        :type: Object
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501

        self._credentials = credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body224, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body224):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
