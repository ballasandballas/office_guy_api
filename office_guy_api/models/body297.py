# coding: utf-8

"""
    OfficeGuy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-06-20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body297(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user': 'Object',
        'role': 'Object',
        'credentials': 'Object'
    }
    if hasattr(WebsiteUsersCreateRequest, "swagger_types"):
        swagger_types.update(WebsiteUsersCreateRequest.swagger_types)

    attribute_map = {
        'user': 'User',
        'role': 'Role',
        'credentials': 'Credentials'
    }
    if hasattr(WebsiteUsersCreateRequest, "attribute_map"):
        attribute_map.update(WebsiteUsersCreateRequest.attribute_map)

    def __init__(self, user=None, role=None, credentials=None, *args, **kwargs):  # noqa: E501
        """Body297 - a model defined in Swagger"""  # noqa: E501
        self._user = None
        self._role = None
        self._credentials = None
        self.discriminator = None
        self.user = user
        self.role = role
        self.credentials = credentials
        WebsiteUsersCreateRequest.__init__(self, *args, **kwargs)

    @property
    def user(self):
        """Gets the user of this Body297.  # noqa: E501

        User details  # noqa: E501

        :return: The user of this Body297.  # noqa: E501
        :rtype: Object
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Body297.

        User details  # noqa: E501

        :param user: The user of this Body297.  # noqa: E501
        :type: Object
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def role(self):
        """Gets the role of this Body297.  # noqa: E501

        User role  # noqa: E501

        :return: The role of this Body297.  # noqa: E501
        :rtype: Object
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Body297.

        User role  # noqa: E501

        :param role: The role of this Body297.  # noqa: E501
        :type: Object
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    @property
    def credentials(self):
        """Gets the credentials of this Body297.  # noqa: E501

        Company API credentials  # noqa: E501

        :return: The credentials of this Body297.  # noqa: E501
        :rtype: Object
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this Body297.

        Company API credentials  # noqa: E501

        :param credentials: The credentials of this Body297.  # noqa: E501
        :type: Object
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501

        self._credentials = credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body297, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body297):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
