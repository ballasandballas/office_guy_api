# coding: utf-8

"""
    OfficeGuy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-06-20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AccountingTypedDocumentPayment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'document_currency_amount': 'float',
        'details_general': 'AllOfAccountingTypedDocumentPaymentDetailsGeneral',
        'details_cash': 'AllOfAccountingTypedDocumentPaymentDetailsCash',
        'details_bank_transfer': 'AllOfAccountingTypedDocumentPaymentDetailsBankTransfer',
        'details_cheque': 'AllOfAccountingTypedDocumentPaymentDetailsCheque',
        'details_credit_card': 'AllOfAccountingTypedDocumentPaymentDetailsCreditCard',
        'details_other': 'AllOfAccountingTypedDocumentPaymentDetailsOther',
        'details_digital': 'AllOfAccountingTypedDocumentPaymentDetailsDigital',
        'details_tax_withholding': 'AllOfAccountingTypedDocumentPaymentDetailsTaxWithholding'
    }

    attribute_map = {
        'amount': 'Amount',
        'document_currency_amount': 'DocumentCurrency_Amount',
        'details_general': 'Details_General',
        'details_cash': 'Details_Cash',
        'details_bank_transfer': 'Details_BankTransfer',
        'details_cheque': 'Details_Cheque',
        'details_credit_card': 'Details_CreditCard',
        'details_other': 'Details_Other',
        'details_digital': 'Details_Digital',
        'details_tax_withholding': 'Details_TaxWithholding'
    }

    def __init__(self, amount=None, document_currency_amount=None, details_general=None, details_cash=None, details_bank_transfer=None, details_cheque=None, details_credit_card=None, details_other=None, details_digital=None, details_tax_withholding=None):  # noqa: E501
        """AccountingTypedDocumentPayment - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._document_currency_amount = None
        self._details_general = None
        self._details_cash = None
        self._details_bank_transfer = None
        self._details_cheque = None
        self._details_credit_card = None
        self._details_other = None
        self._details_digital = None
        self._details_tax_withholding = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if document_currency_amount is not None:
            self.document_currency_amount = document_currency_amount
        if details_general is not None:
            self.details_general = details_general
        if details_cash is not None:
            self.details_cash = details_cash
        if details_bank_transfer is not None:
            self.details_bank_transfer = details_bank_transfer
        if details_cheque is not None:
            self.details_cheque = details_cheque
        if details_credit_card is not None:
            self.details_credit_card = details_credit_card
        if details_other is not None:
            self.details_other = details_other
        if details_digital is not None:
            self.details_digital = details_digital
        if details_tax_withholding is not None:
            self.details_tax_withholding = details_tax_withholding

    @property
    def amount(self):
        """Gets the amount of this AccountingTypedDocumentPayment.  # noqa: E501

        Received payment amount<div><i>Leave this empty for non-ILS documents and automatic exchange rate</i></div>  # noqa: E501

        :return: The amount of this AccountingTypedDocumentPayment.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AccountingTypedDocumentPayment.

        Received payment amount<div><i>Leave this empty for non-ILS documents and automatic exchange rate</i></div>  # noqa: E501

        :param amount: The amount of this AccountingTypedDocumentPayment.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def document_currency_amount(self):
        """Gets the document_currency_amount of this AccountingTypedDocumentPayment.  # noqa: E501

        Received payment amount<div><i>Leave this empty for ILS documents / automatic exchange rate</i></div>  # noqa: E501

        :return: The document_currency_amount of this AccountingTypedDocumentPayment.  # noqa: E501
        :rtype: float
        """
        return self._document_currency_amount

    @document_currency_amount.setter
    def document_currency_amount(self, document_currency_amount):
        """Sets the document_currency_amount of this AccountingTypedDocumentPayment.

        Received payment amount<div><i>Leave this empty for ILS documents / automatic exchange rate</i></div>  # noqa: E501

        :param document_currency_amount: The document_currency_amount of this AccountingTypedDocumentPayment.  # noqa: E501
        :type: float
        """

        self._document_currency_amount = document_currency_amount

    @property
    def details_general(self):
        """Gets the details_general of this AccountingTypedDocumentPayment.  # noqa: E501

        General details<div><i>Provide when payment method isn't detailed</i></div>  # noqa: E501

        :return: The details_general of this AccountingTypedDocumentPayment.  # noqa: E501
        :rtype: AllOfAccountingTypedDocumentPaymentDetailsGeneral
        """
        return self._details_general

    @details_general.setter
    def details_general(self, details_general):
        """Sets the details_general of this AccountingTypedDocumentPayment.

        General details<div><i>Provide when payment method isn't detailed</i></div>  # noqa: E501

        :param details_general: The details_general of this AccountingTypedDocumentPayment.  # noqa: E501
        :type: AllOfAccountingTypedDocumentPaymentDetailsGeneral
        """

        self._details_general = details_general

    @property
    def details_cash(self):
        """Gets the details_cash of this AccountingTypedDocumentPayment.  # noqa: E501

        Cash details<div><i>Provide when payment was made using cash</i></div>  # noqa: E501

        :return: The details_cash of this AccountingTypedDocumentPayment.  # noqa: E501
        :rtype: AllOfAccountingTypedDocumentPaymentDetailsCash
        """
        return self._details_cash

    @details_cash.setter
    def details_cash(self, details_cash):
        """Sets the details_cash of this AccountingTypedDocumentPayment.

        Cash details<div><i>Provide when payment was made using cash</i></div>  # noqa: E501

        :param details_cash: The details_cash of this AccountingTypedDocumentPayment.  # noqa: E501
        :type: AllOfAccountingTypedDocumentPaymentDetailsCash
        """

        self._details_cash = details_cash

    @property
    def details_bank_transfer(self):
        """Gets the details_bank_transfer of this AccountingTypedDocumentPayment.  # noqa: E501

        Bank transfer details<div><i>Provide when payment was made using bank transfer</i></div>  # noqa: E501

        :return: The details_bank_transfer of this AccountingTypedDocumentPayment.  # noqa: E501
        :rtype: AllOfAccountingTypedDocumentPaymentDetailsBankTransfer
        """
        return self._details_bank_transfer

    @details_bank_transfer.setter
    def details_bank_transfer(self, details_bank_transfer):
        """Sets the details_bank_transfer of this AccountingTypedDocumentPayment.

        Bank transfer details<div><i>Provide when payment was made using bank transfer</i></div>  # noqa: E501

        :param details_bank_transfer: The details_bank_transfer of this AccountingTypedDocumentPayment.  # noqa: E501
        :type: AllOfAccountingTypedDocumentPaymentDetailsBankTransfer
        """

        self._details_bank_transfer = details_bank_transfer

    @property
    def details_cheque(self):
        """Gets the details_cheque of this AccountingTypedDocumentPayment.  # noqa: E501

        Cheque details<div><i>Provide when payment was made using cheque</i></div>  # noqa: E501

        :return: The details_cheque of this AccountingTypedDocumentPayment.  # noqa: E501
        :rtype: AllOfAccountingTypedDocumentPaymentDetailsCheque
        """
        return self._details_cheque

    @details_cheque.setter
    def details_cheque(self, details_cheque):
        """Sets the details_cheque of this AccountingTypedDocumentPayment.

        Cheque details<div><i>Provide when payment was made using cheque</i></div>  # noqa: E501

        :param details_cheque: The details_cheque of this AccountingTypedDocumentPayment.  # noqa: E501
        :type: AllOfAccountingTypedDocumentPaymentDetailsCheque
        """

        self._details_cheque = details_cheque

    @property
    def details_credit_card(self):
        """Gets the details_credit_card of this AccountingTypedDocumentPayment.  # noqa: E501

        Credit card details<div><i>Provide when payment was made using external credit card</i></div>  # noqa: E501

        :return: The details_credit_card of this AccountingTypedDocumentPayment.  # noqa: E501
        :rtype: AllOfAccountingTypedDocumentPaymentDetailsCreditCard
        """
        return self._details_credit_card

    @details_credit_card.setter
    def details_credit_card(self, details_credit_card):
        """Sets the details_credit_card of this AccountingTypedDocumentPayment.

        Credit card details<div><i>Provide when payment was made using external credit card</i></div>  # noqa: E501

        :param details_credit_card: The details_credit_card of this AccountingTypedDocumentPayment.  # noqa: E501
        :type: AllOfAccountingTypedDocumentPaymentDetailsCreditCard
        """

        self._details_credit_card = details_credit_card

    @property
    def details_other(self):
        """Gets the details_other of this AccountingTypedDocumentPayment.  # noqa: E501

        Other details<div><i>Provide when payment was made using custom payment method</i></div>  # noqa: E501

        :return: The details_other of this AccountingTypedDocumentPayment.  # noqa: E501
        :rtype: AllOfAccountingTypedDocumentPaymentDetailsOther
        """
        return self._details_other

    @details_other.setter
    def details_other(self, details_other):
        """Sets the details_other of this AccountingTypedDocumentPayment.

        Other details<div><i>Provide when payment was made using custom payment method</i></div>  # noqa: E501

        :param details_other: The details_other of this AccountingTypedDocumentPayment.  # noqa: E501
        :type: AllOfAccountingTypedDocumentPaymentDetailsOther
        """

        self._details_other = details_other

    @property
    def details_digital(self):
        """Gets the details_digital of this AccountingTypedDocumentPayment.  # noqa: E501

        Digital details<div><i>Provide when payment was made using digital payment method</i></div>  # noqa: E501

        :return: The details_digital of this AccountingTypedDocumentPayment.  # noqa: E501
        :rtype: AllOfAccountingTypedDocumentPaymentDetailsDigital
        """
        return self._details_digital

    @details_digital.setter
    def details_digital(self, details_digital):
        """Sets the details_digital of this AccountingTypedDocumentPayment.

        Digital details<div><i>Provide when payment was made using digital payment method</i></div>  # noqa: E501

        :param details_digital: The details_digital of this AccountingTypedDocumentPayment.  # noqa: E501
        :type: AllOfAccountingTypedDocumentPaymentDetailsDigital
        """

        self._details_digital = details_digital

    @property
    def details_tax_withholding(self):
        """Gets the details_tax_withholding of this AccountingTypedDocumentPayment.  # noqa: E501

        Tax Withholding details<div><i>Provide when taxwithholding</i></div>  # noqa: E501

        :return: The details_tax_withholding of this AccountingTypedDocumentPayment.  # noqa: E501
        :rtype: AllOfAccountingTypedDocumentPaymentDetailsTaxWithholding
        """
        return self._details_tax_withholding

    @details_tax_withholding.setter
    def details_tax_withholding(self, details_tax_withholding):
        """Sets the details_tax_withholding of this AccountingTypedDocumentPayment.

        Tax Withholding details<div><i>Provide when taxwithholding</i></div>  # noqa: E501

        :param details_tax_withholding: The details_tax_withholding of this AccountingTypedDocumentPayment.  # noqa: E501
        :type: AllOfAccountingTypedDocumentPaymentDetailsTaxWithholding
        """

        self._details_tax_withholding = details_tax_withholding

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountingTypedDocumentPayment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountingTypedDocumentPayment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
