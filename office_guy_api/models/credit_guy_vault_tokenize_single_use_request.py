# coding: utf-8

"""
    OfficeGuy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-06-20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CreditGuyVaultTokenizeSingleUseRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card_number': 'str',
        'expiration_month': 'int',
        'expiration_year': 'int',
        'cvv': 'str',
        'citizen_id': 'str',
        'credentials': 'AllOfCreditGuyVaultTokenizeSingleUseRequestCredentials'
    }

    attribute_map = {
        'card_number': 'CardNumber',
        'expiration_month': 'ExpirationMonth',
        'expiration_year': 'ExpirationYear',
        'cvv': 'CVV',
        'citizen_id': 'CitizenID',
        'credentials': 'Credentials'
    }

    def __init__(self, card_number=None, expiration_month=None, expiration_year=None, cvv=None, citizen_id=None, credentials=None):  # noqa: E501
        """CreditGuyVaultTokenizeSingleUseRequest - a model defined in Swagger"""  # noqa: E501
        self._card_number = None
        self._expiration_month = None
        self._expiration_year = None
        self._cvv = None
        self._citizen_id = None
        self._credentials = None
        self.discriminator = None
        self.card_number = card_number
        self.expiration_month = expiration_month
        self.expiration_year = expiration_year
        if cvv is not None:
            self.cvv = cvv
        if citizen_id is not None:
            self.citizen_id = citizen_id
        self.credentials = credentials

    @property
    def card_number(self):
        """Gets the card_number of this CreditGuyVaultTokenizeSingleUseRequest.  # noqa: E501

        Full card number to tokenize  # noqa: E501

        :return: The card_number of this CreditGuyVaultTokenizeSingleUseRequest.  # noqa: E501
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this CreditGuyVaultTokenizeSingleUseRequest.

        Full card number to tokenize  # noqa: E501

        :param card_number: The card_number of this CreditGuyVaultTokenizeSingleUseRequest.  # noqa: E501
        :type: str
        """
        if card_number is None:
            raise ValueError("Invalid value for `card_number`, must not be `None`")  # noqa: E501

        self._card_number = card_number

    @property
    def expiration_month(self):
        """Gets the expiration_month of this CreditGuyVaultTokenizeSingleUseRequest.  # noqa: E501

        Card expiration month (1-12).  # noqa: E501

        :return: The expiration_month of this CreditGuyVaultTokenizeSingleUseRequest.  # noqa: E501
        :rtype: int
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """Sets the expiration_month of this CreditGuyVaultTokenizeSingleUseRequest.

        Card expiration month (1-12).  # noqa: E501

        :param expiration_month: The expiration_month of this CreditGuyVaultTokenizeSingleUseRequest.  # noqa: E501
        :type: int
        """
        if expiration_month is None:
            raise ValueError("Invalid value for `expiration_month`, must not be `None`")  # noqa: E501

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """Gets the expiration_year of this CreditGuyVaultTokenizeSingleUseRequest.  # noqa: E501

        Card expiration year (4 digits).  # noqa: E501

        :return: The expiration_year of this CreditGuyVaultTokenizeSingleUseRequest.  # noqa: E501
        :rtype: int
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """Sets the expiration_year of this CreditGuyVaultTokenizeSingleUseRequest.

        Card expiration year (4 digits).  # noqa: E501

        :param expiration_year: The expiration_year of this CreditGuyVaultTokenizeSingleUseRequest.  # noqa: E501
        :type: int
        """
        if expiration_year is None:
            raise ValueError("Invalid value for `expiration_year`, must not be `None`")  # noqa: E501

        self._expiration_year = expiration_year

    @property
    def cvv(self):
        """Gets the cvv of this CreditGuyVaultTokenizeSingleUseRequest.  # noqa: E501

        Card CVV/CVV2.  # noqa: E501

        :return: The cvv of this CreditGuyVaultTokenizeSingleUseRequest.  # noqa: E501
        :rtype: str
        """
        return self._cvv

    @cvv.setter
    def cvv(self, cvv):
        """Sets the cvv of this CreditGuyVaultTokenizeSingleUseRequest.

        Card CVV/CVV2.  # noqa: E501

        :param cvv: The cvv of this CreditGuyVaultTokenizeSingleUseRequest.  # noqa: E501
        :type: str
        """

        self._cvv = cvv

    @property
    def citizen_id(self):
        """Gets the citizen_id of this CreditGuyVaultTokenizeSingleUseRequest.  # noqa: E501

        Israel Citizen ID / Passport Number.  # noqa: E501

        :return: The citizen_id of this CreditGuyVaultTokenizeSingleUseRequest.  # noqa: E501
        :rtype: str
        """
        return self._citizen_id

    @citizen_id.setter
    def citizen_id(self, citizen_id):
        """Sets the citizen_id of this CreditGuyVaultTokenizeSingleUseRequest.

        Israel Citizen ID / Passport Number.  # noqa: E501

        :param citizen_id: The citizen_id of this CreditGuyVaultTokenizeSingleUseRequest.  # noqa: E501
        :type: str
        """

        self._citizen_id = citizen_id

    @property
    def credentials(self):
        """Gets the credentials of this CreditGuyVaultTokenizeSingleUseRequest.  # noqa: E501

        Company API public credentials  # noqa: E501

        :return: The credentials of this CreditGuyVaultTokenizeSingleUseRequest.  # noqa: E501
        :rtype: AllOfCreditGuyVaultTokenizeSingleUseRequestCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this CreditGuyVaultTokenizeSingleUseRequest.

        Company API public credentials  # noqa: E501

        :param credentials: The credentials of this CreditGuyVaultTokenizeSingleUseRequest.  # noqa: E501
        :type: AllOfCreditGuyVaultTokenizeSingleUseRequestCredentials
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501

        self._credentials = credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditGuyVaultTokenizeSingleUseRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditGuyVaultTokenizeSingleUseRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
