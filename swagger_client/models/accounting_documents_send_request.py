# coding: utf-8

"""
    OfficeGuy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccountingDocumentsSendRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'int',
        'document_type': 'str',
        'document_number': 'int',
        'email_address': 'str',
        'sender_user_id': 'int',
        'original': 'bool',
        'language': 'str',
        'personal_message': 'str',
        'credentials': 'CoreAPICredentials'
    }

    attribute_map = {
        'entity_id': 'EntityID',
        'document_type': 'DocumentType',
        'document_number': 'DocumentNumber',
        'email_address': 'EmailAddress',
        'sender_user_id': 'SenderUserID',
        'original': 'Original',
        'language': 'Language',
        'personal_message': 'PersonalMessage',
        'credentials': 'Credentials'
    }

    def __init__(self, entity_id=None, document_type=None, document_number=None, email_address=None, sender_user_id=None, original=None, language=None, personal_message=None, credentials=None):  # noqa: E501
        """AccountingDocumentsSendRequest - a model defined in Swagger"""  # noqa: E501

        self._entity_id = None
        self._document_type = None
        self._document_number = None
        self._email_address = None
        self._sender_user_id = None
        self._original = None
        self._language = None
        self._personal_message = None
        self._credentials = None
        self.discriminator = None

        if entity_id is not None:
            self.entity_id = entity_id
        if document_type is not None:
            self.document_type = document_type
        if document_number is not None:
            self.document_number = document_number
        if email_address is not None:
            self.email_address = email_address
        if sender_user_id is not None:
            self.sender_user_id = sender_user_id
        if original is not None:
            self.original = original
        if language is not None:
            self.language = language
        if personal_message is not None:
            self.personal_message = personal_message
        self.credentials = credentials

    @property
    def entity_id(self):
        """Gets the entity_id of this AccountingDocumentsSendRequest.  # noqa: E501

        Document identifier  # noqa: E501

        :return: The entity_id of this AccountingDocumentsSendRequest.  # noqa: E501
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this AccountingDocumentsSendRequest.

        Document identifier  # noqa: E501

        :param entity_id: The entity_id of this AccountingDocumentsSendRequest.  # noqa: E501
        :type: int
        """

        self._entity_id = entity_id

    @property
    def document_type(self):
        """Gets the document_type of this AccountingDocumentsSendRequest.  # noqa: E501

        Document type  # noqa: E501

        :return: The document_type of this AccountingDocumentsSendRequest.  # noqa: E501
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this AccountingDocumentsSendRequest.

        Document type  # noqa: E501

        :param document_type: The document_type of this AccountingDocumentsSendRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Invoice", "InvoiceAndReceipt", "Receipt", "ProformaInvoice", "DonationReceipt", "CreditInvoice", "CreditInvoiceAndReceipt", "CreditReceipt", "Order", "DeliveryNote", "GoodsReturnNote", "PurchasingOrder", "PriceQuotation", "PaymentRequest", "CreditDonationReceipt"]  # noqa: E501
        if document_type not in allowed_values:
            raise ValueError(
                "Invalid value for `document_type` ({0}), must be one of {1}"  # noqa: E501
                .format(document_type, allowed_values)
            )

        self._document_type = document_type

    @property
    def document_number(self):
        """Gets the document_number of this AccountingDocumentsSendRequest.  # noqa: E501

        Document number  # noqa: E501

        :return: The document_number of this AccountingDocumentsSendRequest.  # noqa: E501
        :rtype: int
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """Sets the document_number of this AccountingDocumentsSendRequest.

        Document number  # noqa: E501

        :param document_number: The document_number of this AccountingDocumentsSendRequest.  # noqa: E501
        :type: int
        """

        self._document_number = document_number

    @property
    def email_address(self):
        """Gets the email_address of this AccountingDocumentsSendRequest.  # noqa: E501

        Email address<div><i>Defaults to the customer email address</i></div>  # noqa: E501

        :return: The email_address of this AccountingDocumentsSendRequest.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this AccountingDocumentsSendRequest.

        Email address<div><i>Defaults to the customer email address</i></div>  # noqa: E501

        :param email_address: The email_address of this AccountingDocumentsSendRequest.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def sender_user_id(self):
        """Gets the sender_user_id of this AccountingDocumentsSendRequest.  # noqa: E501

        Sender user ID<div><i>Defaults to the company owner</i></div>  # noqa: E501

        :return: The sender_user_id of this AccountingDocumentsSendRequest.  # noqa: E501
        :rtype: int
        """
        return self._sender_user_id

    @sender_user_id.setter
    def sender_user_id(self, sender_user_id):
        """Sets the sender_user_id of this AccountingDocumentsSendRequest.

        Sender user ID<div><i>Defaults to the company owner</i></div>  # noqa: E501

        :param sender_user_id: The sender_user_id of this AccountingDocumentsSendRequest.  # noqa: E501
        :type: int
        """

        self._sender_user_id = sender_user_id

    @property
    def original(self):
        """Gets the original of this AccountingDocumentsSendRequest.  # noqa: E501

        Send original document if possible<div><i>Defaults to False</i></div>  # noqa: E501

        :return: The original of this AccountingDocumentsSendRequest.  # noqa: E501
        :rtype: bool
        """
        return self._original

    @original.setter
    def original(self, original):
        """Sets the original of this AccountingDocumentsSendRequest.

        Send original document if possible<div><i>Defaults to False</i></div>  # noqa: E501

        :param original: The original of this AccountingDocumentsSendRequest.  # noqa: E501
        :type: bool
        """

        self._original = original

    @property
    def language(self):
        """Gets the language of this AccountingDocumentsSendRequest.  # noqa: E501

        Email language<div><i>Defaults to the company language</i></div>  # noqa: E501

        :return: The language of this AccountingDocumentsSendRequest.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this AccountingDocumentsSendRequest.

        Email language<div><i>Defaults to the company language</i></div>  # noqa: E501

        :param language: The language of this AccountingDocumentsSendRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Hebrew", "English", "Arabic", "Spanish"]  # noqa: E501
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"  # noqa: E501
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def personal_message(self):
        """Gets the personal_message of this AccountingDocumentsSendRequest.  # noqa: E501

        Personal message  # noqa: E501

        :return: The personal_message of this AccountingDocumentsSendRequest.  # noqa: E501
        :rtype: str
        """
        return self._personal_message

    @personal_message.setter
    def personal_message(self, personal_message):
        """Sets the personal_message of this AccountingDocumentsSendRequest.

        Personal message  # noqa: E501

        :param personal_message: The personal_message of this AccountingDocumentsSendRequest.  # noqa: E501
        :type: str
        """

        self._personal_message = personal_message

    @property
    def credentials(self):
        """Gets the credentials of this AccountingDocumentsSendRequest.  # noqa: E501

        Company API credentials  # noqa: E501

        :return: The credentials of this AccountingDocumentsSendRequest.  # noqa: E501
        :rtype: CoreAPICredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this AccountingDocumentsSendRequest.

        Company API credentials  # noqa: E501

        :param credentials: The credentials of this AccountingDocumentsSendRequest.  # noqa: E501
        :type: CoreAPICredentials
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501

        self._credentials = credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountingDocumentsSendRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountingDocumentsSendRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
