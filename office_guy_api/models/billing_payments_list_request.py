# coding: utf-8

"""
    OfficeGuy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-06-20
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class BillingPaymentsListRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_from': 'datetime',
        'date_to': 'datetime',
        'valid': 'bool',
        'start_index': 'int',
        'credentials': 'AllOfBillingPaymentsListRequestCredentials'
    }

    attribute_map = {
        'date_from': 'Date_From',
        'date_to': 'Date_To',
        'valid': 'Valid',
        'start_index': 'StartIndex',
        'credentials': 'Credentials'
    }

    def __init__(self, date_from=None, date_to=None, valid=None, start_index=None, credentials=None):  # noqa: E501
        """BillingPaymentsListRequest - a model defined in Swagger"""  # noqa: E501
        self._date_from = None
        self._date_to = None
        self._valid = None
        self._start_index = None
        self._credentials = None
        self.discriminator = None
        self.date_from = date_from
        self.date_to = date_to
        if valid is not None:
            self.valid = valid
        if start_index is not None:
            self.start_index = start_index
        self.credentials = credentials

    @property
    def date_from(self):
        """Gets the date_from of this BillingPaymentsListRequest.  # noqa: E501

        Payments date range (from)  # noqa: E501

        :return: The date_from of this BillingPaymentsListRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this BillingPaymentsListRequest.

        Payments date range (from)  # noqa: E501

        :param date_from: The date_from of this BillingPaymentsListRequest.  # noqa: E501
        :type: datetime
        """
        if date_from is None:
            raise ValueError("Invalid value for `date_from`, must not be `None`")  # noqa: E501

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this BillingPaymentsListRequest.  # noqa: E501

        Payments date range (to)  # noqa: E501

        :return: The date_to of this BillingPaymentsListRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this BillingPaymentsListRequest.

        Payments date range (to)  # noqa: E501

        :param date_to: The date_to of this BillingPaymentsListRequest.  # noqa: E501
        :type: datetime
        """
        if date_to is None:
            raise ValueError("Invalid value for `date_to`, must not be `None`")  # noqa: E501

        self._date_to = date_to

    @property
    def valid(self):
        """Gets the valid of this BillingPaymentsListRequest.  # noqa: E501

        List only valid/invalid payments  # noqa: E501

        :return: The valid of this BillingPaymentsListRequest.  # noqa: E501
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this BillingPaymentsListRequest.

        List only valid/invalid payments  # noqa: E501

        :param valid: The valid of this BillingPaymentsListRequest.  # noqa: E501
        :type: bool
        """

        self._valid = valid

    @property
    def start_index(self):
        """Gets the start_index of this BillingPaymentsListRequest.  # noqa: E501

        Start index for paging  # noqa: E501

        :return: The start_index of this BillingPaymentsListRequest.  # noqa: E501
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this BillingPaymentsListRequest.

        Start index for paging  # noqa: E501

        :param start_index: The start_index of this BillingPaymentsListRequest.  # noqa: E501
        :type: int
        """

        self._start_index = start_index

    @property
    def credentials(self):
        """Gets the credentials of this BillingPaymentsListRequest.  # noqa: E501

        Company API credentials  # noqa: E501

        :return: The credentials of this BillingPaymentsListRequest.  # noqa: E501
        :rtype: AllOfBillingPaymentsListRequestCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this BillingPaymentsListRequest.

        Company API credentials  # noqa: E501

        :param credentials: The credentials of this BillingPaymentsListRequest.  # noqa: E501
        :type: AllOfBillingPaymentsListRequestCredentials
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501

        self._credentials = credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BillingPaymentsListRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillingPaymentsListRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
